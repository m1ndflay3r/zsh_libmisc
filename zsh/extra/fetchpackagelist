#!/usr/bin/env zsh
fetchpackagelist() {
  ## load modules
  autoload hexd
  autoload hexud
  autoload revstr
  ## env setup
  unset fetpaclis_print_flag
  fetpaclis_print_flag=0
  # valid char array (hacky way to remove ANSI codes)
  fpl_chars_valid=('a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 'u' 'v' 'w' 'x' 'y' 'z' 'A' 'B' 'C' 'D' 'E' 'F' 'G' 'H' 'I' 'J' 'K' 'L' 'M' 'N' 'O' 'P' 'Q' 'R' 'S' 'T' 'U' 'V' 'W' 'X' 'Y' 'Z' '1' '2' '3' '4' '5' '6' '7' '8' '9' '0' '-' '_' '.')
  # use pacsearch to get a list of all packages.
  fetchpackagelist_raw=$(pacsearch '')
  ## main function
  # iterate over each line generated from pacsearch, trigger package print if string contains substring [installed]
  unset fpl_package_arr
  declare -a fpl_package_arr
  fpl_main() {
    IFS=$'\n'
    for package in $=fetchpackagelist_raw; do
      if [[ $package = *'[installed]'* ]]; then
        current_pack=$( \
        # read character by character, checking against valid package-name chars and printing if match found (for ANSII code removal). Start printing when char / found (last char before package name in pacsearch) and stop printing if space found (last character after package name), to separate package name from unneeded chars
        while read -r -k1 -u0 fetpaclis_char; do
          [[ $fetpaclis_char = *' '* ]] && fetpaclis_print_flag=0
          [ "$fetpaclis_print_flag" = 1 ] && (
            for validchar in $=fpl_chars_valid; do
              [ "$fetpaclis_char" = "$validchar" ] && print -n "$fetpaclis_char"
            done
          )
          [[ $fetpaclis_char = *'/'* ]] && fetpaclis_print_flag=1
        done < <(printf "%s""$package")
        )
        # remove leftover ANSII chars from output (specifically, 0m1m) and print
        current_pack=${current_pack//'0m1m'/''}
        print -n "$current_pack"
      fi
      print -n ' '
    done
    unset IFS
  }
  # duplicate space / leftover ANSII byte prevention
  # iterate over output char by char. If char is a valid package naming character, print and set isspaced + hasspaced to 0.
  # (i.e, indicate that this character is not a space or ANSII byte). If character is found to be a space (or ANSII byte), set isspace to 1.
  # if space detected and last loop iteration was not a space (or ANSII byte), print a space.
  # if space detected and space was printed in last loop iteration, do nothing.
  # flag hasspaced and isspaced is reset when a valid package naming char is read once more.
  fpl_isspace=0
  fpl_hasspaced=0
  while read -r -k1 -u0 LOOPZ; do
    for validchar in $=fpl_chars_valid; do
      if [ "$LOOPZ" = "$validchar" ]; then
        fpl_isspace=0
        fpl_hasspaced=0
        print -n "$LOOPZ"
        break
      else
        fpl_isspace=1
      fi
    done
    if [ "$fpl_isspace" = 1 ] && [ "$fpl_hasspaced" = 0 ]; then
      fpl_hasspaced=1
      print -n ' '
    fi
  done < <(fpl_main)
  # probably unnecessary, but did this out of habit.
  # on the off chance the above while loop broke before the last character in read buffer was printed, print that character.
  if [ ! -z "$LOOPZ" ]; then
    if [ ! "$LOOPZ" = ' ' ]; then
      print -n "$LOOPZ"
    fi
  fi
  return 0
}
