#!/usr/bin/env zsh

2d_arr() {
  ## fetch input
  request="$1"
  arrname="$2"
  op_three="$3"
  op_four="$4"
  op_five="$5"
  op_six="$6"

  ## fail printout
  fail() {
    print "See man/libmisc/2d_arr.md for usage"
  }

  ## exit with fail status if no input given
  [ -z "$arrname" ] && \
    print "Error: insufficient input!" && \
    print '' && \
    fail && \
    return 1

  ## validate input
  valid_comm_list=('create'
                   'delete'
                   'query'
                   'query_grid'
                   'query_col'
                   'query_row'
                   'query_adj'
                   'search'
                   'update'
                   'draw'
                   'del'
                   'cr'
                   'ss'
                   'upd'
                   'qu'
                   'dr'
                   'qg'
                   'qc'
                   'qr'
                   'qa')
  invalid=1
  for chk_valid in $=valid_comm_list; do
    [ "$chk_valid" = "$request" ] && \
      invalid=0
  done
  [ "$invalid" = 1 ] && \
    print "Error: received invalid command" && \
    fail && \
    return 1

  # command aliases for brevity (alias wasnt working for whatever reason so now we're using case statement)
  case $request in
    (del) request=delete ;;
    (cr) request=create ;;
    (ss) request=search ;;
    (upd) request=update ;;
    (qu) request=query ;;
    (dr) request=draw ;;
    (qg) request=query_grid ;;
    (qr) request=query_row ;;
    (qc) request=query_col ;;
    (qa) request=query_adj
  esac

  ## env setup
  autoload nrandom
  autoload isfile
  autoload zmkdir
  autoload zrm
  autoload zrmdir
  autoload fox
  autoload fox-fr
  autoload getstrln

  # create working dir if not found
  ! isfile /tmp/libmisc_2d_arr && \
    zmkdir /tmp/libmisc_2d_arr

  ## define functions
  # convert input provided on stdin to zsh-format arrays
  create() {
    isfile /tmp/libmisc_2d_arr/$arrname && \
      rm -rf /tmp/libmisc_2d_arr/$arrname
    zmkdir /tmp/libmisc_2d_arr/$arrname
    touch /tmp/libmisc_2d_arr/$arrname/input_arrays
    create_blank() {
      x_length="$op_three"
      y_length="$op_four"
      #set default size to 10x10 if no x y given
      [ -z "$x_length" ] && \
        x_length=10
      [ -z "$y_length" ] && \
        y_length=10
      y_count=0
      while true; do
        y_count=$((y_count+1))
        [ "$y_count" = $((y_length+1)) ] && \
          break
        x_count=0
        while true; do
          x_count=$((x_count+1))
          [ "$x_count" = $((x_length+1)) ] && \
            break
          print -n '.'
        done
        print ''
      done
    }
    [ "$blank" = 1 ] && \
      conv_to_arr_input=$(create_blank) || \
      conv_to_arr_input=$(fox)
    unset blank
    array_count=0
    indice_count=0
    IFS=$'\n'
    for cr_array in $=conv_to_arr_input; do
      indice_placeholder=0
      array_count=$((array_count+1))
      print -n ""$arrname"_y_array_"$array_count"=(" >> /tmp/libmisc_2d_arr/$arrname/input_arrays
      while IFS= noglob read -r -k1 -d '' -u0 array_indice; do
        print -n "'" >> /tmp/libmisc_2d_arr/$arrname/input_arrays
        print -n "$array_indice" >> /tmp/libmisc_2d_arr/$arrname/input_arrays
        print "'" >> /tmp/libmisc_2d_arr/$arrname/input_arrays
        indice_placeholder=$((indice_placeholder+1))
      done < <(IFS= noglob print -rn "$cr_array")
      [ "$indice_placeholder" -gt "$indice_count" ] && \
        indice_count="$indice_placeholder"
      print ')' >> /tmp/libmisc_2d_arr/$arrname/input_arrays
    done
    unset IFS
    print "$array_count" > /tmp/libmisc_2d_arr/$arrname/array_count
    print "$indice_count" > /tmp/libmisc_2d_arr/$arrname/indice_count
  }

  # update indice at x y coords in array
  update() {
    # char to be swapped in
    update_char="$2"
    x_coord="$3"
    y_coord="$4"
    (! isfile /tmp/libmisc_2d_arr/$arrname/array_count || ! isfile /tmp/libmisc_2d_arr/$arrname/indice_count) && {
      print "Error: attempted update undeclared array"
      fail
      return 1
    }
    array_count=$(fox-fr /tmp/libmisc_2d_arr/$arrname/array_count)
    indice_count=$(fox-fr /tmp/libmisc_2d_arr/$arrname/indice_count)
    # error if insufficient input
    ([ -z "$x_coord" ] || [ -z "$y_coord" ]) && {
      print "Error: received blank coord!"
      fail
      return 1
    }
    # error if out of bounds update attempt
    ([ "$x_coord" -gt "$indice_count" ] || [ "$y_coord" -gt "$array_count" ]) && {
      print "OOB"
      return 3
    }
    # generate session ID (multithread clash prevention)
    zsession_id=$(nrandom)
    # write position update script (I know, I know)
    rm -rf /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    #env setup
    print '#!/usr/bin/env zsh' > /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print '' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print "arrname="$arrname"" >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    #fetch input arrays
    print 'source /tmp/libmisc_2d_arr/$arrname/input_arrays' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print 'fpath=(/usr/lib/zsh_libmisc/libmisc.zwc $fpath)' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print 'autoload isfile' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print 'isfile /tmp/libmisc_2d_arr/$arrname/ledger && \' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print 'source /tmp/libmisc_2d_arr/$arrname/ledger' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    #env setup
    print 'rm -rf /tmp/libmisc_2d_arr/$arrname/array_update_$zsession_id' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print "x_coord="$x_coord"" >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print "y_coord="$y_coord"" >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print "zsession_id="$zsession_id"" >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print -n "update_char='" >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print -n "$update_char" >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print "'" >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    #print start of updated array
    print -n 'print -n "' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print -n "$arrname" >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print '_y_array_"$y_coord"=(" > /tmp/libmisc_2d_arr/$arrname/array_update_$zsession_id' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    #iterate over each indice in target array, add indice as is if not target, add swap char instead if ta>
    print 'indice_count=0' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id

    print -n 'for indice in $=' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print -n "$arrname" >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print -n '_y_array_' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print -n "$y_coord" >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print '; do' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id

    print '  indice_count=$((indice_count+1))' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id

    print '  [ "$indice_count" = "$x_coord" ] && \' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id

    print -n 'print -n "' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print -n "'" >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print '" >> /tmp/libmisc_2d_arr/$arrname/array_update_$zsession_id && \' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id

    print -n 'print -n "' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print -n "$update_char" >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print '" >> /tmp/libmisc_2d_arr/$arrname/array_update_$zsession_id && \' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id

    print -n 'print "' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print -n "'" >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print '" >> /tmp/libmisc_2d_arr/$arrname/array_update_$zsession_id || \' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id

    print -n '(print -n "' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print -n "'" >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print '" >> /tmp/libmisc_2d_arr/$arrname/array_update_$zsession_id && \' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id

    print -n 'print -n "' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print -n '$indice' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print '">> /tmp/libmisc_2d_arr/$arrname/array_update_$zsession_id && \' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id

    print -n 'print "' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print -n "'" >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print '" >> /tmp/libmisc_2d_arr/$arrname/array_update_$zsession_id)' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id

    print 'done' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print "print ')' >> /tmp/libmisc_2d_arr/$arrname/array_update_$zsession_id" >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    chmod 755 /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    source /tmp/libmisc_2d_arr/$arrname/array_update_$zsession_id
    ! isfile /tmp/libmisc_2d_arr/$arrname/ledger && \
      touch /tmp/libmisc_2d_arr/$arrname/ledger
    fox-fr /tmp/libmisc_2d_arr/$arrname/array_update_$zsession_id >> /tmp/libmisc_2d_arr/$arrname/ledger
    print '' >> /tmp/libmisc_2d_arr/$arrname/ledger
    rm -rf /tmp/libmisc_2d_arr/$arrname/array_update_$zsession_id
    rm -rf /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
  }

  # delete array
  delete() {
    (! isfile /tmp/libmisc_2d_arr || ! isfile /tmp/libmisc_2d_arr/$arrname) && \
      return 0
    preservedir=$(pwd)
    cd /tmp/libmisc_2d_arr/$arrname
    for delete_arr in *; do
      until ! isfile $delete_arr &> /dev/null; do
        zrm $delete_arr &> /dev/null
      done
    done
    cd $preservedir
    until ! isfile /tmp/libmisc_2d_arr/$arrname &> /dev/null; do
      zrmdir /tmp/libmisc_2d_arr/$arrname &> /dev/null
    done
    return 0
  }

  # retrieve contents of indice at x y coord
  query() {
    x_coord="$op_three"
    y_coord="$op_four"
    (! isfile /tmp/libmisc_2d_arr/$arrname/array_count || ! isfile /tmp/libmisc_2d_arr/$arrname/indice_count) && {
      print "Error: attempted query undeclared array"
      fail
      return 1
    }
    array_count=$(fox-fr /tmp/libmisc_2d_arr/$arrname/array_count)
    indice_count=$(fox-fr /tmp/libmisc_2d_arr/$arrname/indice_count)
    # error if insufficient input
    ([ -z "$x_coord" ] || [ -z "$y_coord" ]) && {
      print "Error: received empty query"
      fail
      return 1
    }
    # error if out of bounds query attempt
    ([ "$x_coord" -gt "$indice_count" ] || [ "$y_coord" -gt "$array_count" ]) && {
      print "OOB"
      return 3
    }
    # generate session id (multithread clash prevention)
    zsession_id=$(nrandom)
    rm -rf /tmp/libmisc_2d_arr/$arrname/query_$zsession_id
    # write position query script (I know, I know)
    print '#!/usr/bin/env zsh' > /tmp/libmisc_2d_arr/$arrname/query_$zsession_id
    print '' >> /tmp/libmisc_2d_arr/$arrname/query_$zsession_id
    print 'fpath=(/usr/lib/zsh_libmisc/libmisc.zwc $fpath)' >> /tmp/libmisc_2d_arr/$arrname/query_$zsession_id
    print 'autoload isfile' >> /tmp/libmisc_2d_arr/$arrname/query_$zsession_id
    #env setup
    print "x_coord="$x_coord"" >> /tmp/libmisc_2d_arr/$arrname/query_$zsession_id
    print "y_coord="$y_coord"" >> /tmp/libmisc_2d_arr/$arrname/query_$zsession_id
    print "arrname="$arrname"" >> /tmp/libmisc_2d_arr/$arrname/query_$zsession_id
    print "source /tmp/libmisc_2d_arr/$arrname/input_arrays" >> /tmp/libmisc_2d_arr/$arrname/query_$zsession_id
    print 'isfile /tmp/libmisc_2d_arr/$arrname/ledger && \' >> /tmp/libmisc_2d_arr/$arrname/query_$zsession_id
    print "source /tmp/libmisc_2d_arr/$arrname/ledger" >> /tmp/libmisc_2d_arr/$arrname/query_$zsession_id
    print 'indice_count=0' >> /tmp/libmisc_2d_arr/$arrname/query_$zsession_id
    #iterate over each indice until reaching x coord
    print -n 'for indice in $=' >> /tmp/libmisc_2d_arr/$arrname/query_$zsession_id
    print -n "$arrname" >> /tmp/libmisc_2d_arr/$arrname/query_$zsession_id
    print -n '_y_array_' >> /tmp/libmisc_2d_arr/$arrname/query_$zsession_id
    print -n "$y_coord" >> /tmp/libmisc_2d_arr/$arrname/query_$zsession_id
    print '; do' >> /tmp/libmisc_2d_arr/$arrname/query_$zsession_id

    print 'indice_count=$((indice_count+1))' >> /tmp/libmisc_2d_arr/$arrname/query_$zsession_id
    print '[ "$indice_count" = "$x_coord" ] && \' >> /tmp/libmisc_2d_arr/$arrname/query_$zsession_id
    print '  print "$indice" && \' >> /tmp/libmisc_2d_arr/$arrname/query_$zsession_id
    print '  break' >> /tmp/libmisc_2d_arr/$arrname/query_$zsession_id

    print 'done' >> /tmp/libmisc_2d_arr/$arrname/query_$zsession_id
    chmod 755 /tmp/libmisc_2d_arr/$arrname/query_$zsession_id
    query_result=$(/tmp/libmisc_2d_arr/$arrname/query_$zsession_id)
    print "$query_result"
    rm -rf /tmp/libmisc_2d_arr/$arrname/query_$zsession_id
  }

  query_grid() {
    (! isfile /tmp/libmisc_2d_arr/$arrname/indice_count || ! isfile /tmp/libmisc_2d_arr/$arrname/array_count) && {
      print "Error: attempted to query undeclared array"
      fail
      return 1
    }
    x_ln=$(fox-fr /tmp/libmisc_2d_arr/$arrname/indice_count)
    y_ln=$(fox-fr /tmp/libmisc_2d_arr/$arrname/array_count)
    print ""$x_ln" "$y_ln""
  }

  query_row() {
    y_coord="$op_three"
    ! isfile /tmp/libmisc_2d_arr/$arrname && {
      print "Error: attempted to query undeclared array!"
      fail
      return 1
    }
    [ -z "$y_coord" ] && {
      print "Error: received empty row query!"
      fail
      return 1
    }
    y_ln=$(fox-fr /tmp/libmisc_2d_arr/$arrname/array_count)
    [ "$y_coord" -gt "$y_ln" ] && {
      print "OOB"
      return 3
    }
    # generate session id (multithread clash prevention)
    zsession_id=$(nrandom)
    rm -rf /tmp/libmisc_2d_arr/$arrname/query_row_$zsession_id
    print '#!/usr/bin/env zsh' > /tmp/libmisc_2d_arr/$arrname/query_row_$zsession_id
    print 'fpath=(/usr/lib/zsh_libmisc/libmisc.zwc $fpath)' >> /tmp/libmisc_2d_arr/$arrname/query_row_$zsession_id
    print 'autoload isfile' >> /tmp/libmisc_2d_arr/$arrname/query_row_$zsession_id
    print "y_coord="$y_coord"" >> /tmp/libmisc_2d_arr/$arrname/query_row_$zsession_id
    print "arrname="$arrname"" >> /tmp/libmisc_2d_arr/$arrname/query_row_$zsession_id
    print "source /tmp/libmisc_2d_arr/$arrname/input_arrays" >> /tmp/libmisc_2d_arr/$arrname/query_row_$zsession_id
    print 'isfile /tmp/libmisc_2d_arr/$arrname/ledger && {' >> /tmp/libmisc_2d_arr/$arrname/query_row_$zsession_id
    print "  source /tmp/libmisc_2d_arr/$arrname/ledger" >> /tmp/libmisc_2d_arr/$arrname/query_row_$zsession_id
    print '}' >> /tmp/libmisc_2d_arr/$arrname/query_row_$zsession_id
    print -n 'print $' >> /tmp/libmisc_2d_arr/$arrname/query_row_$zsession_id
    print -n "$arrname" >> /tmp/libmisc_2d_arr/$arrname/query_row_$zsession_id
    print -n '_y_array_' >> /tmp/libmisc_2d_arr/$arrname/query_row_$zsession_id
    print -n "$y_coord" >> /tmp/libmisc_2d_arr/$arrname/query_row_$zsession_id
    print '[@]' >> /tmp/libmisc_2d_arr/$arrname/query_row_$zsession_id
    chmod 755 /tmp/libmisc_2d_arr/$arrname/query_row_$zsession_id
    print $(/tmp/libmisc_2d_arr/$arrname/query_row_$zsession_id)
    rm -rf /tmp/libmisc_2d_arr/$arrname/query_row_$zsession_id
  }

  query_col() {
    x_coord="$op_three"
    ! isfile /tmp/libmisc_2d_arr/$arrname && {
      print "Error: attempted to query undeclared array!"
      fail
      return 1
    }
    [ -z "$x_coord" ] && {
      print "Error: received empty col query!"
      fail
      return 1
    }
    x_ln=$(fox-fr /tmp/libmisc_2d_arr/$arrname/indice_count)
    [ "$x_coord" -gt "$x_ln" ] && {
      print "OOB"
      return 3
    }
    y_ln=$(cat /tmp/libmisc_2d_arr/$arrname/array_count)
    y_counter=0
    while true; do
      y_counter=$((y_counter+1))
      [ $y_counter -gt $y_ln ] && \
        break
      2d_arr query $arrname $x_coord $y_counter
    done
  }

  query_adj() {
    x_coord="$op_three"
    y_coord="$op_four"
    direction="$op_five"
    (! isfile /tmp/libmisc_2d_arr/$arrname/array_count || ! isfile /tmp/libmisc_2d_arr/$arrname/indice_count) && {
      print "Error: attempted query undeclared array"
      fail
      return 1
    }
    y_ln=$(fox-fr /tmp/libmisc_2d_arr/$arrname/array_count)
    x_ln=$(fox-fr /tmp/libmisc_2d_arr/$arrname/indice_count)
    # error if insufficient input
    ([ -z "$x_coord" ] || [ -z "$y_coord" ]) && {
      print "Error: received empty query"
      fail
      return 1
    }
    # error if out of bounds query attempt
    ([ "$x_coord" -gt "$x_ln" ] || [ "$y_coord" -gt "$y_ln" ]) && {
      print "OOB"
      return 3
    }
    [ "$direction" = "nw" ] && {
      while true; do
        x_coord=$((x_coord-1))
        y_coord=$((y_coord-1))
        ([ "$x_coord" -le 0 ] || [ "$y_coord" -le 0 ]) && \
          return 0
        print ""$(2d_arr query $arrname $x_coord $y_coord)" "$x_coord" "$y_coord""
        [ "$single" = "1" ] && \
          return 0
      done
    }
    [ "$direction" = "n" ] && {
      while true; do
        y_coord=$((y_coord-1))
        [ "$y_coord" -le 0 ] && \
          return 0
        print ""$(2d_arr query $arrname $x_coord $y_coord)" "$x_coord" "$y_coord""
        [ "$single" = "1" ] && \
          return 0
      done
    }
    [ "$direction" = "ne" ] && {
      while true; do
        x_coord=$((x_coord+1))
        y_coord=$((y_coord-1))
        ([ "$x_coord" -gt "$x_ln" ] || [ "$y_coord" -le 0 ]) && \
          return 0
        print ""$(2d_arr query $arrname $x_coord $y_coord)" "$x_coord" "$y_coord""
        [ "$single" = "1" ] && \
          return 0
      done
    }
    [ "$direction" = "e" ] && {
      while true; do
        x_coord=$((x_coord+1))
        [ "$x_coord" -gt "$x_ln" ] && \
          return 0
        print ""$(2d_arr query $arrname $x_coord $y_coord)" "$x_coord" "$y_coord""
        [ "$single" = "1" ] && \
          return 0
      done
    }
    [ "$direction" = "se" ] && {
      while true; do
        x_coord=$((x_coord+1))
        y_coord=$((y_coord+1))
        ([ "$x_coord" -gt "$x_ln" ] || [ "$y_coord" -gt "$y_ln" ]) && \
          return 0
        print ""$(2d_arr query $arrname $x_coord $y_coord)" "$x_coord" "$y_coord""
        [ "$single" = "1" ] && \
          return 0
      done
    }
    [ "$direction" = "s" ] && {
      while true; do
        y_coord=$((y_coord+1))
        [ "$y_coord" -gt "$y_ln" ] && \
          return 0
        print ""$(2d_arr query $arrname $x_coord $y_coord)" "$x_coord" "$y_coord""
        [ "$single" = "1" ] && \
          return 0
      done
    }
    [ "$direction" = "sw" ] && {
      while true; do
        x_coord=$((x_coord-1))
        y_coord=$((y_coord+1))
        ([ "$x_coord" -le 0 ] || [ "$y_coord" -gt "$y_ln" ]) && \
          return 0
        print ""$(2d_arr query $arrname $x_coord $y_coord)" "$x_coord" "$y_coord""
        [ "$single" = "1" ] && \
          return 0
      done
    }
    [ "$direction" = "w" ] && {
      while true; do
        x_coord=$((x_coord-1))
        [ "$x_coord" -le 0 ] && \
          return 0
        print ""$(2d_arr query $arrname $x_coord $y_coord)" "$x_coord" "$y_coord""
        [ "$single" = "1" ] && \
          return 0
      done
    }
  }

  # search array for indices containing value
  search() {
    do_search=$op_three
    (! isfile /tmp/libmisc_2d_arr/$arrname/array_count || ! isfile /tmp/libmisc_2d_arr/$arrname/indice_count) && \
      print "Error: attempted search undeclared array" && \
      fail && \
      return 1
    array_count=$(fox-fr /tmp/libmisc_2d_arr/$arrname/array_count)
    indice_count=$(fox-fr /tmp/libmisc_2d_arr/$arrname/indice_count)
    x_coord=0
    y_coord=0
    found=0
    while true; do
      y_coord=$((y_coord+1))
      [ "$y_coord" = "$((array_count+1))" ] && \
        break
      [[ "$(2d_arr query_row $arrname $y_coord)" = *"$do_search"* ]] && {
        x_coord=0
        while true; do
          x_coord=$((x_coord+1))
          [ "$x_coord" = "$((indice_count+1))" ] && \
            break
          test_position=$(2d_arr query $arrname $x_coord $y_coord)
          [ "$test_position" = "$do_search" ] && \
            print ""$x_coord" "$y_coord""
        done
      }
    done
  }

  draw() {
    draw_proto() {
      (! isfile /tmp/libmisc_2d_arr/$arrname/array_count || ! isfile /tmp/libmisc_2d_arr/$arrname/indice_count) && \
        print "Error: attempted draw undeclared array" && \
        fail && \
        return 1
      array_count=$(fox-fr /tmp/libmisc_2d_arr/$arrname/array_count)
      indice_count=$(fox-fr /tmp/libmisc_2d_arr/$arrname/indice_count)
      x_coord=0
      y_coord=0
      while true; do
        y_coord=$((y_coord+1))
        [ "$y_coord" = "$((array_count+1))" ] && \
          break
        2d_arr query_row $arrname $y_coord
      done
    }
    draw_buffer=$(draw_proto)
    print "$draw_buffer"
  }
  $request $arrname $op_two $op_three $op_four $op_five $op_six
}

