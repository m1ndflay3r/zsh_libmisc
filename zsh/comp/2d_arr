#!/usr/bin/env zsh

2d_arr() {
  ## fetch input
  request="$1"
  arrname="$2"
  op_three="$3"
  op_four="$4"
  op_five="$5"
  op_six="$6"

  ## fail printout
  fail() {
    print "See man/libmisc/2d_arr.md for usage"
  }

  ## exit with fail status if no input given
  [ -z "$arrname" ] && \
    print "Error: insufficient input!" && \
    print '' && \
    fail && \
    return 1

  ## validate input
  valid_comm_list=('create'
                   'delete'
                   'query'
                   'query_grid'
                   'query_col'
                   'query_row'
                   'query_adj'
                   'search'
                   'update'
                   'draw'
                   'create_link'
                   'query_link'
                   'delete_link'
                   'update_section'
                   'query_section'
                   'invert'
                   'del'
                   'cr'
                   'ss'
                   'upd'
                   'qu'
                   'dr'
                   'qg'
                   'qc'
                   'qr'
                   'qa'
                   'cl'
                   'ql'
                   'dl'
                   'us'
                   'qs'
                   'inv')
  invalid=1
  for chk_valid in $=valid_comm_list; do
    [ "$chk_valid" = "$request" ] && \
      invalid=0
  done
  [ "$invalid" = 1 ] && \
    print "Error: received invalid command" && \
    fail && \
    return 1

  # command aliases for brevity (alias wasnt working for whatever reason so now we're using case statement)
  case $request in
    (del) request=delete ;;
    (cr) request=create ;;
    (ss) request=search ;;
    (upd) request=update ;;
    (qu) request=query ;;
    (dr) request=draw ;;
    (qg) request=query_grid ;;
    (qr) request=query_row ;;
    (qc) request=query_col ;;
    (qa) request=query_adj ;;
    (cl) request=create_link ;;
    (ql) request=query_link ;;
    (dl) request=delete_link ;;
    (us) request=update_section ;;
    (qs) request=query_section ;;
    (inv) request=invert ;;
  esac

  ## env setup
  autoload nrandom
  autoload isfile
  autoload fox
  autoload fox-fr
  autoload getstrln
  autoload chkvldint
  autoload revstr

  # create working dir if not found
  ! isfile /tmp/libmisc_2d_arr && \
    mkdir /tmp/libmisc_2d_arr

  ## define functions
  # convert input provided on stdin to zsh-format arrays
  create() {
    chkvldint $arrname && {
      print "Error: arrname cannot be int"
      fail
      return 1
    }
    [ "$blank" = 1 ] && {
      [ -z "$op_three" ] && \
        op_three=10
      [ -z "$op_four" ] && \
        op_four=10
      (! chkvldint $op_three || ! chkvldint $op_four) && {
        print "Error: x_ln and y_ln must be int"
        fail
        return 1
      }
      ([ "$op_three" -le 0 ] || [ "$op_four" -le 0 ]) && {
        print "Error: x_ln and y_ln must be > 0"
        fail
        return 1
      }
    }
    isfile /tmp/libmisc_2d_arr/$arrname && \
      rm -rf /tmp/libmisc_2d_arr/$arrname
    mkdir /tmp/libmisc_2d_arr/$arrname
    touch /tmp/libmisc_2d_arr/$arrname/input_arrays
    create_blank() {
      x_length="$op_three"
      y_length="$op_four"
      y_count=0
      while true; do
        y_count=$((y_count+1))
        [ "$y_count" = $((y_length+1)) ] && \
          break
        x_count=0
        while true; do
          x_count=$((x_count+1))
          [ "$x_count" = $((x_length+1)) ] && \
            break
          [ ! -z "$init_char" ] && \
            print -n "$init_char" \
          || \
            print -n '.'
        done
        print ''
      done
    }
    [ "$blank" = 1 ] && \
      conv_to_arr_input=$(create_blank) || \
      conv_to_arr_input=$(zFOXT='' fox)
    unset blank
    array_count=0
    indice_count=0
    IFS=$'\n'
    for cr_array in $=conv_to_arr_input; do
      indice_placeholder=0
      array_count=$((array_count+1))
      print -n ""$arrname"_y_array_"$array_count"=(" >> /tmp/libmisc_2d_arr/$arrname/input_arrays
      while IFS= noglob read -r -k1 -d '' -u0 array_indice; do
        print -n "'" >> /tmp/libmisc_2d_arr/$arrname/input_arrays
        print -n "$array_indice" >> /tmp/libmisc_2d_arr/$arrname/input_arrays
        print "'" >> /tmp/libmisc_2d_arr/$arrname/input_arrays
        indice_placeholder=$((indice_placeholder+1))
      done < <(IFS= noglob print -rn "$cr_array")
      [ "$indice_placeholder" -gt "$indice_count" ] && \
        indice_count="$indice_placeholder"
      print ')' >> /tmp/libmisc_2d_arr/$arrname/input_arrays
    done
    unset IFS
    print "$array_count" > /tmp/libmisc_2d_arr/$arrname/array_count
    print "$indice_count" > /tmp/libmisc_2d_arr/$arrname/indice_count
  }

  # update indice at x y coords in array
  update() {
    # char to be swapped in
    update_char="$2"
    x_coord="$3"
    y_coord="$4"
    (! isfile /tmp/libmisc_2d_arr/$arrname/array_count || ! isfile /tmp/libmisc_2d_arr/$arrname/indice_count) && {
      print "Error: attempted update undeclared array"
      fail
      return 1
    }
    array_count=$(fox-fr /tmp/libmisc_2d_arr/$arrname/array_count)
    indice_count=$(fox-fr /tmp/libmisc_2d_arr/$arrname/indice_count)
    # error if insufficient input
    ([ -z "$x_coord" ] || [ -z "$y_coord" ]) && {
      print "Error: received blank coord!"
      fail
      return 1
    }
    # error if x or y not int
    (! chkvldint "$x_coord" || ! chkvldint "$y_coord") && {
      print "Error: x and y must be int"
      fail
      return 1
    }
    # error if out of bounds update attempt
    ([ "$x_coord" -gt "$indice_count" ] || [ "$y_coord" -gt "$array_count" ] || [ "$x_coord" -le 0 ] || [ "$y_coord" -le 0 ]) && {
      print "OOB"
      return 3
    }
    # generate session ID (multithread clash prevention)
    zsession_id=$(nrandom)
    # write position update script (I know, I know)
    rm -rf /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    #env setup
    print '#!/usr/bin/env zsh' > /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print '' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print "arrname="$arrname"" >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    #fetch input arrays
    print 'source /tmp/libmisc_2d_arr/$arrname/input_arrays' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print 'fpath=(/usr/lib/zsh_libmisc/libmisc.zwc $fpath)' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print 'autoload isfile' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print 'isfile /tmp/libmisc_2d_arr/$arrname/ledger && \' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print 'source /tmp/libmisc_2d_arr/$arrname/ledger' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    #env setup
    print 'rm -rf /tmp/libmisc_2d_arr/$arrname/array_update_$zsession_id' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print "x_coord="$x_coord"" >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print "y_coord="$y_coord"" >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print "zsession_id="$zsession_id"" >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print -n "update_char='" >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print -n "$update_char" >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print "'" >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    #print start of updated array
    print -n 'print -n "' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print -n "$arrname" >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print '_y_array_"$y_coord"=(" > /tmp/libmisc_2d_arr/$arrname/array_update_$zsession_id' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    #iterate over each indice in target array, add indice as is if not target, add swap char instead if ta>
    print 'indice_count=0' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id

    print -n 'for indice in $=' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print -n "$arrname" >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print -n '_y_array_' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print -n "$y_coord" >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print '; do' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id

    print '  indice_count=$((indice_count+1))' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id

    print '  [ "$indice_count" = "$x_coord" ] && \' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id

    print -n 'print -n "' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print -n "'" >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print '" >> /tmp/libmisc_2d_arr/$arrname/array_update_$zsession_id && \' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id

    print -n 'print -n "' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print -n "$update_char" >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print '" >> /tmp/libmisc_2d_arr/$arrname/array_update_$zsession_id && \' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id

    print -n 'print "' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print -n "'" >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print '" >> /tmp/libmisc_2d_arr/$arrname/array_update_$zsession_id || \' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id

    print -n '(print -n "' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print -n "'" >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print '" >> /tmp/libmisc_2d_arr/$arrname/array_update_$zsession_id && \' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id

    print -n 'print -n "' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print -n '$indice' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print '">> /tmp/libmisc_2d_arr/$arrname/array_update_$zsession_id && \' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id

    print -n 'print "' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print -n "'" >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print '" >> /tmp/libmisc_2d_arr/$arrname/array_update_$zsession_id)' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id

    print 'done' >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    print "print ')' >> /tmp/libmisc_2d_arr/$arrname/array_update_$zsession_id" >> /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    chmod 755 /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
    source /tmp/libmisc_2d_arr/$arrname/array_update_$zsession_id
    ! isfile /tmp/libmisc_2d_arr/$arrname/ledger && \
      touch /tmp/libmisc_2d_arr/$arrname/ledger
    # utilize lock file for ledger write (multithread clash prevention)
    isfile /tmp/libmisc_2d_arr/$arrname/ledger.lck && {
      until ! isfile /tmp/libmisc_2d_arr/$arrname/ledger.lck; do
        sleep 1
      done
    }
    touch /tmp/libmisc_2d_arr/$arrname/ledger.lck
    fox-fr /tmp/libmisc_2d_arr/$arrname/array_update_$zsession_id >> /tmp/libmisc_2d_arr/$arrname/ledger
    print '' >> /tmp/libmisc_2d_arr/$arrname/ledger
    rm -rf /tmp/libmisc_2d_arr/$arrname/ledger.lck
    rm -rf /tmp/libmisc_2d_arr/$arrname/array_update_$zsession_id
    rm -rf /tmp/libmisc_2d_arr/$arrname/working_$zsession_id
  }

  # delete array
  delete() {
    (! isfile /tmp/libmisc_2d_arr || ! isfile /tmp/libmisc_2d_arr/$arrname) && \
      return 0 \
    || \
      rm -rf /tmp/libmisc_2d_arr/$arrname
      return 0
  }

  # retrieve contents of indice at x y coord
  query() {
    x_coord="$op_three"
    y_coord="$op_four"
    (! isfile /tmp/libmisc_2d_arr/$arrname/array_count || ! isfile /tmp/libmisc_2d_arr/$arrname/indice_count) && {
      print "Error: attempted query undeclared array"
      fail
      return 1
    }
    array_count=$(fox-fr /tmp/libmisc_2d_arr/$arrname/array_count)
    indice_count=$(fox-fr /tmp/libmisc_2d_arr/$arrname/indice_count)
    # error if insufficient input
    ([ -z "$x_coord" ] || [ -z "$y_coord" ]) && {
      print "Error: received empty query"
      fail
      return 1
    }
    (! chkvldint "$x_coord" || ! chkvldint "$y_coord") && {
      print "Error: x and y must be int"
      fail
      return 1
    }
    # error if out of bounds query attempt
    ([ "$x_coord" -gt "$indice_count" ] || [ "$y_coord" -gt "$array_count" ] || [ "$x_coord" -le 0 ] || [ "$y_coord" -le 0 ]) && {
      print "OOB"
      return 3
    }
    # generate session id (multithread clash prevention)
    zsession_id=$(nrandom)
    rm -rf /tmp/libmisc_2d_arr/$arrname/query_$zsession_id
    # write position query script (I know, I know)
    print '#!/usr/bin/env zsh' > /tmp/libmisc_2d_arr/$arrname/query_$zsession_id
    print '' >> /tmp/libmisc_2d_arr/$arrname/query_$zsession_id
    print 'fpath=(/usr/lib/zsh_libmisc/libmisc.zwc $fpath)' >> /tmp/libmisc_2d_arr/$arrname/query_$zsession_id
    print 'autoload isfile' >> /tmp/libmisc_2d_arr/$arrname/query_$zsession_id
    #env setup
    print "x_coord="$x_coord"" >> /tmp/libmisc_2d_arr/$arrname/query_$zsession_id
    print "y_coord="$y_coord"" >> /tmp/libmisc_2d_arr/$arrname/query_$zsession_id
    print "arrname="$arrname"" >> /tmp/libmisc_2d_arr/$arrname/query_$zsession_id
    print "source /tmp/libmisc_2d_arr/$arrname/input_arrays" >> /tmp/libmisc_2d_arr/$arrname/query_$zsession_id
    print 'isfile /tmp/libmisc_2d_arr/$arrname/ledger && \' >> /tmp/libmisc_2d_arr/$arrname/query_$zsession_id
    print "source /tmp/libmisc_2d_arr/$arrname/ledger" >> /tmp/libmisc_2d_arr/$arrname/query_$zsession_id
    print 'indice_count=0' >> /tmp/libmisc_2d_arr/$arrname/query_$zsession_id
    #iterate over each indice until reaching x coord
    print -n 'for indice in $=' >> /tmp/libmisc_2d_arr/$arrname/query_$zsession_id
    print -n "$arrname" >> /tmp/libmisc_2d_arr/$arrname/query_$zsession_id
    print -n '_y_array_' >> /tmp/libmisc_2d_arr/$arrname/query_$zsession_id
    print -n "$y_coord" >> /tmp/libmisc_2d_arr/$arrname/query_$zsession_id
    print '; do' >> /tmp/libmisc_2d_arr/$arrname/query_$zsession_id

    print 'indice_count=$((indice_count+1))' >> /tmp/libmisc_2d_arr/$arrname/query_$zsession_id
    print '[ "$indice_count" = "$x_coord" ] && \' >> /tmp/libmisc_2d_arr/$arrname/query_$zsession_id
    print '  print "$indice" && \' >> /tmp/libmisc_2d_arr/$arrname/query_$zsession_id
    print '  break' >> /tmp/libmisc_2d_arr/$arrname/query_$zsession_id

    print 'done' >> /tmp/libmisc_2d_arr/$arrname/query_$zsession_id
    chmod 755 /tmp/libmisc_2d_arr/$arrname/query_$zsession_id
    query_result=$(/tmp/libmisc_2d_arr/$arrname/query_$zsession_id)
    print "$query_result"
    rm -rf /tmp/libmisc_2d_arr/$arrname/query_$zsession_id
  }

  query_grid() {
    (! isfile /tmp/libmisc_2d_arr/$arrname/indice_count || ! isfile /tmp/libmisc_2d_arr/$arrname/array_count) && {
      print "Error: attempted to query undeclared array"
      fail
      return 1
    }
    x_ln=$(fox-fr /tmp/libmisc_2d_arr/$arrname/indice_count)
    y_ln=$(fox-fr /tmp/libmisc_2d_arr/$arrname/array_count)
    print ""$x_ln" "$y_ln""
  }

  query_row() {
    y_coord="$op_three"
    ! isfile /tmp/libmisc_2d_arr/$arrname && {
      print "Error: attempted to query undeclared array!"
      fail
      return 1
    }
    [ -z "$y_coord" ] && {
      print "Error: received empty row query!"
      fail
      return 1
    }
    ! chkvldint "$y_coord" && {
      print "Error: y must be int"
      fail
      return 1
    }
    y_ln=$(fox-fr /tmp/libmisc_2d_arr/$arrname/array_count)
    ([ "$y_coord" -gt "$y_ln" ] || [ "$y_coord" -le 0 ]) && {
      print "OOB"
      return 3
    }
    # generate session id (multithread clash prevention)
    zsession_id=$(nrandom)
    rm -rf /tmp/libmisc_2d_arr/$arrname/query_row_$zsession_id
    print '#!/usr/bin/env zsh' > /tmp/libmisc_2d_arr/$arrname/query_row_$zsession_id
    print 'fpath=(/usr/lib/zsh_libmisc/libmisc.zwc $fpath)' >> /tmp/libmisc_2d_arr/$arrname/query_row_$zsession_id
    print 'autoload isfile' >> /tmp/libmisc_2d_arr/$arrname/query_row_$zsession_id
    print "y_coord="$y_coord"" >> /tmp/libmisc_2d_arr/$arrname/query_row_$zsession_id
    print "arrname="$arrname"" >> /tmp/libmisc_2d_arr/$arrname/query_row_$zsession_id
    print "source /tmp/libmisc_2d_arr/$arrname/input_arrays" >> /tmp/libmisc_2d_arr/$arrname/query_row_$zsession_id
    print 'isfile /tmp/libmisc_2d_arr/$arrname/ledger && {' >> /tmp/libmisc_2d_arr/$arrname/query_row_$zsession_id
    print "  source /tmp/libmisc_2d_arr/$arrname/ledger" >> /tmp/libmisc_2d_arr/$arrname/query_row_$zsession_id
    print '}' >> /tmp/libmisc_2d_arr/$arrname/query_row_$zsession_id
    print -n 'print $' >> /tmp/libmisc_2d_arr/$arrname/query_row_$zsession_id
    print -n "$arrname" >> /tmp/libmisc_2d_arr/$arrname/query_row_$zsession_id
    print -n '_y_array_' >> /tmp/libmisc_2d_arr/$arrname/query_row_$zsession_id
    print -n "$y_coord" >> /tmp/libmisc_2d_arr/$arrname/query_row_$zsession_id
    print '[@]' >> /tmp/libmisc_2d_arr/$arrname/query_row_$zsession_id
    chmod 755 /tmp/libmisc_2d_arr/$arrname/query_row_$zsession_id
    print $(/tmp/libmisc_2d_arr/$arrname/query_row_$zsession_id)
    rm -rf /tmp/libmisc_2d_arr/$arrname/query_row_$zsession_id
  }

  query_col() {
    x_coord="$op_three"
    ! isfile /tmp/libmisc_2d_arr/$arrname && {
      print "Error: attempted to query undeclared array!"
      fail
      return 1
    }
    [ -z "$x_coord" ] && {
      print "Error: received empty col query!"
      fail
      return 1
    }
    ! chkvldint "$x_coord" && {
      print "Error: x must be int"
      fail
      return 1
    }
    x_ln=$(fox-fr /tmp/libmisc_2d_arr/$arrname/indice_count)
    ([ "$x_coord" -gt "$x_ln" ] || [ "$x_coord" -le 0 ]) && {
      print "OOB"
      return 3
    }
    y_ln=$(fox-fr /tmp/libmisc_2d_arr/$arrname/array_count)
    y_counter=0
    while true; do
      y_counter=$((y_counter+1))
      [ $y_counter -gt $y_ln ] && \
        break
      2d_arr query $arrname $x_coord $y_counter
    done
  }

  query_adj() {
    x_coord="$op_three"
    y_coord="$op_four"
    direction="$op_five"
    (! isfile /tmp/libmisc_2d_arr/$arrname/array_count || ! isfile /tmp/libmisc_2d_arr/$arrname/indice_count) && {
      print "Error: attempted query undeclared array"
      fail
      return 1
    }
    y_ln=$(fox-fr /tmp/libmisc_2d_arr/$arrname/array_count)
    x_ln=$(fox-fr /tmp/libmisc_2d_arr/$arrname/indice_count)
    # error if insufficient input
    ([ -z "$x_coord" ] || [ -z "$y_coord" ]) && {
      print "Error: received empty query"
      fail
      return 1
    }
    (! chkvldint "$x_coord" || ! chkvldint "$y_coord") && {
      print "Error: x and y must be int"
      fail
      return 1
    }
    # error if out of bounds query attempt
    ([ "$x_coord" -gt "$x_ln" ] || [ "$y_coord" -gt "$y_ln" ] || [ "$x_coord" -le 0 ] || [ "$y_coord" -le 0 ]) && {
      print "OOB"
      return 3
    }
    # error if direction invalid
    valid_directions=('nw'
                      'n'
                      'ne'
                      'e'
                      'se'
                      's'
                      'sw'
                      'w')
    direction_invalid=1
    for check_valid_direction in $=valid_directions; do
      [ "$check_valid_direction" = "$direction" ] && {
        direction_invalid=0
        break
      }
    done
    [ "$direction_invalid" = 1 ] && {
      print "Error: direction must be nw, n, ne, e, se, s, sw, or w"
      fail
      return 1
    }
    [ "$direction" = "nw" ] && {
      while true; do
        x_coord=$((x_coord-1))
        y_coord=$((y_coord-1))
        ([ "$x_coord" -le 0 ] || [ "$y_coord" -le 0 ]) && \
          return 0
        print ""$(2d_arr query $arrname $x_coord $y_coord)" "$x_coord" "$y_coord""
        [ "$single" = "1" ] && \
          return 0
      done
    }
    [ "$direction" = "n" ] && {
      while true; do
        y_coord=$((y_coord-1))
        [ "$y_coord" -le 0 ] && \
          return 0
        print ""$(2d_arr query $arrname $x_coord $y_coord)" "$x_coord" "$y_coord""
        [ "$single" = "1" ] && \
          return 0
      done
    }
    [ "$direction" = "ne" ] && {
      while true; do
        x_coord=$((x_coord+1))
        y_coord=$((y_coord-1))
        ([ "$x_coord" -gt "$x_ln" ] || [ "$y_coord" -le 0 ]) && \
          return 0
        print ""$(2d_arr query $arrname $x_coord $y_coord)" "$x_coord" "$y_coord""
        [ "$single" = "1" ] && \
          return 0
      done
    }
    [ "$direction" = "e" ] && {
      while true; do
        x_coord=$((x_coord+1))
        [ "$x_coord" -gt "$x_ln" ] && \
          return 0
        print ""$(2d_arr query $arrname $x_coord $y_coord)" "$x_coord" "$y_coord""
        [ "$single" = "1" ] && \
          return 0
      done
    }
    [ "$direction" = "se" ] && {
      while true; do
        x_coord=$((x_coord+1))
        y_coord=$((y_coord+1))
        ([ "$x_coord" -gt "$x_ln" ] || [ "$y_coord" -gt "$y_ln" ]) && \
          return 0
        print ""$(2d_arr query $arrname $x_coord $y_coord)" "$x_coord" "$y_coord""
        [ "$single" = "1" ] && \
          return 0
      done
    }
    [ "$direction" = "s" ] && {
      while true; do
        y_coord=$((y_coord+1))
        [ "$y_coord" -gt "$y_ln" ] && \
          return 0
        print ""$(2d_arr query $arrname $x_coord $y_coord)" "$x_coord" "$y_coord""
        [ "$single" = "1" ] && \
          return 0
      done
    }
    [ "$direction" = "sw" ] && {
      while true; do
        x_coord=$((x_coord-1))
        y_coord=$((y_coord+1))
        ([ "$x_coord" -le 0 ] || [ "$y_coord" -gt "$y_ln" ]) && \
          return 0
        print ""$(2d_arr query $arrname $x_coord $y_coord)" "$x_coord" "$y_coord""
        [ "$single" = "1" ] && \
          return 0
      done
    }
    [ "$direction" = "w" ] && {
      while true; do
        x_coord=$((x_coord-1))
        [ "$x_coord" -le 0 ] && \
          return 0
        print ""$(2d_arr query $arrname $x_coord $y_coord)" "$x_coord" "$y_coord""
        [ "$single" = "1" ] && \
          return 0
      done
    }
  }

  create_link() {
    x_coord="$op_three"
    y_coord="$op_four"
    xx_coord="$op_five"
    yy_coord="$op_six"
    (! isfile /tmp/libmisc_2d_arr/$arrname/array_count || ! isfile /tmp/libmisc_2d_arr/$arrname/indice_count) && {
      print "Error: attempted reference undeclared array"
      fail
      return 1
    }
    y_ln=$(fox-fr /tmp/libmisc_2d_arr/$arrname/array_count)
    x_ln=$(fox-fr /tmp/libmisc_2d_arr/$arrname/indice_count)
    # error if insufficient input
    ([ -z "$x_coord" ] || [ -z "$y_coord" ] || [ -z "$xx_coord" ] || [ -z "$yy_coord" ]) && {
      print "Error: received empty link req"
      fail
      return 1
    }
    (! chkvldint "$x_coord" || ! chkvldint "$y_coord" || \
    ! chkvldint "$xx_coord" || ! chkvldint "$yy_coord") && {
      print "Error: x and y must be int"
      fail
      return 1
    }
    # error if out of bounds link attempt
    ([ "$x_coord" -gt "$x_ln" ] || [ "$y_coord" -gt "$y_ln" ] || [ "$xx_coord" -gt "$x_ln" ] || [ "$yy_coord" -gt "$y_ln" ] || \
     [ "$x_coord" -le 0 ] || [ "$y_coord" -le 0 ] || [ "$xx_coord" -le 0 ] || [ "$yy_coord" -le 0 ]) && {
      print "OOB"
      return 3
    }
    ! isfile /tmp/libmisc_2d_arr/$arrname/links && \
      mkdir /tmp/libmisc_2d_arr/$arrname/links
    isfile /tmp/libmisc_2d_arr/$arrname/links/"$x_coord""$y_coord" && {
      chk_link_dup=$(cat /tmp/libmisc_2d_arr/$arrname/links/"$x_coord""$y_coord")
      IFS=$'\n'
      for chk_link in $=chk_link_dup; do
        [ "$chk_link" = ""$xx_coord" "$yy_coord"" ] && \
          return 0
      done
      unset IFS
    } || \
    touch /tmp/libmisc_2d_arr/$arrname/links/"$x_coord""$y_coord"
    # use lock file (multithread clash prevention)
    isfile /tmp/libmisc_2d_arr/$arrname/links/"$x_coord""$y_coord".lck && {
      until ! isfile /tmp/libmisc_2d_arr/$arrname/links/"$x_coord""$y_coord".lck; do
        sleep 1
      done
    }
    touch /tmp/libmisc_2d_arr/$arrname/links/"$x_coord""$y_coord".lck
    print ""$xx_coord" "$yy_coord"" >> /tmp/libmisc_2d_arr/$arrname/links/"$x_coord""$y_coord"
    rm -rf /tmp/libmisc_2d_arr/$arrname/links/"$x_coord""$y_coord".lck
    ! [ "$mono" = 1 ] && \
      2d_arr create_link $arrname $xx_coord $yy_coord $x_coord $y_coord
    return 0
  }

  query_link() {
    x_coord="$op_three"
    y_coord="$op_four"
    (! isfile /tmp/libmisc_2d_arr/$arrname/array_count || ! isfile /tmp/libmisc_2d_arr/$arrname/indice_count) && {
      print "Error: attempted reference undeclared array"
      fail
      return 1
    }
    y_ln=$(fox-fr /tmp/libmisc_2d_arr/$arrname/array_count)
    x_ln=$(fox-fr /tmp/libmisc_2d_arr/$arrname/indice_count)
    # error if insufficient input
    ([ -z "$x_coord" ] || [ -z "$y_coord" ]) && {
      print "Error: received empty link query"
      fail
      return 1
    }
    (! chkvldint "$x_coord" || ! chkvldint "$y_coord") && {
      print "Error: x and y must be int"
      fail
      return 1
    }
    # error if out of bounds link attempt
    ([ "$x_coord" -gt "$x_ln" ] || [ "$y_coord" -gt "$y_ln" ] || \
     [ "$x_coord" -le 0 ] || [ "$y_coord" -le 0 ]) && {
      print "OOB"
      return 3
    }
    # error if link not exist
    (! isfile /tmp/libmisc_2d_arr/$arrname/links || ! isfile /tmp/libmisc_2d_arr/$arrname/links/"$x_coord""$y_coord") && {
      print "none"
      return 4
    }
    fox-fr /tmp/libmisc_2d_arr/$arrname/links/"$x_coord""$y_coord"
    return 0
  }

  delete_link() {
    x_coord="$op_three"
    y_coord="$op_four"
    xx_coord="$op_five"
    yy_coord="$op_six"
    (! isfile /tmp/libmisc_2d_arr/$arrname/array_count || ! isfile /tmp/libmisc_2d_arr/$arrname/indice_count) && {
      print "Error: attempted reference undeclared array"
      fail
      return 1
    }
    y_ln=$(fox-fr /tmp/libmisc_2d_arr/$arrname/array_count)
    x_ln=$(fox-fr /tmp/libmisc_2d_arr/$arrname/indice_count)
    # error if insufficient input
    ([ -z "$x_coord" ] || [ -z "$y_coord" ] || [ -z "$xx_coord" ] || [ -z "$yy_coord" ]) && {
      print "Error: received empty unlink req"
      fail
      return 1
    }
    (! chkvldint "$x_coord" || ! chkvldint "$y_coord" || \
    ! chkvldint "$xx_coord" || ! chkvldint "$yy_coord") && {
      print "Error: x and y must be int"
      fail
      return 1
    }
    # error if out of bounds
    ([ "$x_coord" -gt "$x_ln" ] || [ "$y_coord" -gt "$y_ln" ] || \
     [ "$xx_coord" -gt "$x_ln" ] || [ "$yy_coord" -gt "$y_ln" ] || \
     [ "$x_coord" -le 0 ] || [ "$y_coord" -le 0 ] || \
     [ "$xx_coord" -le 0 ] || [ "$yy_coord" -le 0 ]) && {
      print "OOB"
      return 3
    }
    # return 0 if link not exist
    (! isfile /tmp/libmisc_2d_arr/$arrname/links || ! isfile /tmp/libmisc_2d_arr/$arrname/links/"$x_coord""$y_coord") && {
      return 0
    }
    # read links into variable, blank out links
    fetch_current_links=$(fox-fr /tmp/libmisc_2d_arr/$arrname/links/"$x_coord""$y_coord")
    print -n '' > /tmp/libmisc_2d_arr/$arrname/links/"$x_coord""$y_coord"
    # divide up links by newline, print back to links if not unlink target
    IFS=$'\n'
    for zlinks in $=fetch_current_links; do
      [ "$zlinks" != ""$xx_coord" "$yy_coord"" ] && \
        print "$zlinks" >> /tmp/libmisc_2d_arr/$arrname/links/"$x_coord""$y_coord"
    done
    unset IFS
    # delete links if blank after unlink
    fetch_adjusted_links=$(fox-fr /tmp/libmisc_2d_arr/$arrname/links/"$x_coord""$y_coord")
    [ -z "$fetch_adjusted_links" ] && \
      rm -rf /tmp/libmisc_2d_arr/$arrname/links/"$x_coord""$y_coord"
    return 0
  }

  # search array for indices containing value
  search() {
    do_search=$op_three
    (! isfile /tmp/libmisc_2d_arr/$arrname/array_count || ! isfile /tmp/libmisc_2d_arr/$arrname/indice_count) && \
      print "Error: attempted search undeclared array" && \
      fail && \
      return 1
    array_count=$(fox-fr /tmp/libmisc_2d_arr/$arrname/array_count)
    indice_count=$(fox-fr /tmp/libmisc_2d_arr/$arrname/indice_count)
    x_coord=0
    y_coord=0
    found=0
    while true; do
      y_coord=$((y_coord+1))
      [ "$y_coord" = "$((array_count+1))" ] && \
        break
      [[ "$(2d_arr query_row $arrname $y_coord)" = *"$do_search"* ]] && {
        x_coord=0
        while true; do
          x_coord=$((x_coord+1))
          [ "$x_coord" = "$((indice_count+1))" ] && \
            break
          test_position=$(2d_arr query $arrname $x_coord $y_coord)
          [ "$test_position" = "$do_search" ] && \
            print ""$x_coord" "$y_coord""
        done
      }
    done
  }

  draw() {
    draw_proto() {
      (! isfile /tmp/libmisc_2d_arr/$arrname/array_count || ! isfile /tmp/libmisc_2d_arr/$arrname/indice_count) && \
        print "Error: attempted draw undeclared array" && \
        fail && \
        return 1
      array_count=$(fox-fr /tmp/libmisc_2d_arr/$arrname/array_count)
      indice_count=$(fox-fr /tmp/libmisc_2d_arr/$arrname/indice_count)
      x_coord=0
      y_coord=0
      while true; do
        y_coord=$((y_coord+1))
        [ "$y_coord" = "$((array_count+1))" ] && \
          break
        2d_arr query_row $arrname $y_coord
      done
    }
    draw_buffer=$(draw_proto)
    print "$draw_buffer"
  }

  update_section() {
    x_coord="$op_three"
    y_coord="$op_four"
    xx_coord="$op_five"
    yy_coord="$op_six"
    (! isfile /tmp/libmisc_2d_arr/$arrname/array_count || \
     ! isfile /tmp/libmisc_2d_arr/$arrname/indice_count) && {
      print "Error: attempted reference undeclared array"
      fail
      return 1
    }
    [ -z "$x_coord" ] || [ -z "$y_coord" ] || [ -z "$xx_coord" ] || \
    [ -z "$yy_coord" ] || [ -z "$updstr" ] && {
      print "Error: update_section received insufficient input"
      fail
      return 1
    }
    (! chkvldint "$x_coord" || ! chkvldint "$y_coord" || \
    ! chkvldint "$xx_coord" || ! chkvldint "$yy_coord") && {
      print "Error: x and y must be int"
      fail
      return 1
    }
    x_ln=$(fox-fr /tmp/libmisc_2d_arr/$arrname/indice_count)
    y_ln=$(fox-fr /tmp/libmisc_2d_arr/$arrname/array_count)
    ([ "$x_coord" -gt "$x_ln" ] || [ "$y_coord" -gt "$y_ln" ] || \
     [ "$xx_coord" -gt "$x_ln" ] || [ "$yy_coord" -gt "$y_ln" ] || \
     [ "$x_coord" -le 0 ] || [ "$y_coord" -le 0 ] || \
     [ "$xx_coord" -le 0 ] || [ "$yy_coord" -le 0 ]) && {
      print "OOB"
      return 3
    }
    upd_y_count=$op_four
    y_stop_point=$yy_coord
    x_stop_point=$xx_coord
    while true; do
      upd_x_count=$op_three
      while true; do
        (2d_arr update "$arrname" "$updstr" "$upd_x_count" "$upd_y_count")
        upd_x_count=$((upd_x_count+1))
        [ "$upd_x_count" -gt "$x_stop_point" ] && \
          break
      done
      upd_y_count=$((upd_y_count+1))
      [ "$upd_y_count" -gt "$y_stop_point" ] && \
        break
    done
    return 0
  }

  query_section() {
    x_coord="$op_three"
    y_coord="$op_four"
    xx_coord="$op_five"
    yy_coord="$op_six"
    (! isfile /tmp/libmisc_2d_arr/$arrname/array_count || \
     ! isfile /tmp/libmisc_2d_arr/$arrname/indice_count) && {
      print "Error: attempted reference undeclared array"
      fail
      return 1
    }
    [ -z "$x_coord" ] || [ -z "$y_coord" ] || [ -z "$xx_coord" ] || \
    [ -z "$yy_coord" ] && {
      print "Error: query_section received insufficient input"
      fail
      return 1
    }
    (! chkvldint "$x_coord" || ! chkvldint "$y_coord" || \
    ! chkvldint "$xx_coord" || ! chkvldint "$yy_coord") && {
      print "Error: x and y must be int"
      fail
      return 1
    }
    x_ln=$(fox-fr /tmp/libmisc_2d_arr/$arrname/indice_count)
    y_ln=$(fox-fr /tmp/libmisc_2d_arr/$arrname/array_count)
    ([ "$x_coord" -gt "$x_ln" ] || [ "$y_coord" -gt "$y_ln" ] || \
     [ "$xx_coord" -gt "$x_ln" ] || [ "$yy_coord" -gt "$y_ln" ] || \
     [ "$x_coord" -le 0 ] || [ "$y_coord" -le 0 ] || \
     [ "$xx_coord" -le 0 ] || [ "$yy_coord" -le 0 ]) && {
      print "OOB"
      return 3
    }
    y_stop_point=$yy_coord
    x_stop_point=$xx_coord
    y_start_point=$y_coord
    x_start_point=$x_coord
    while true; do
      query_section_working=$(2d_arr query_row $arrname $y_start_point)
      query_sec_county=0
      IFS=$' '
      for query_sect_working in $=query_section_working; do
        query_sec_county=$((query_sec_county+1))
        [ "$query_sec_county" -ge "$x_start_point" ] && \
        [ "$query_sec_county" -le "$x_stop_point" ] && \
          print -n ""$query_sect_working" "
        [ "$query_sec_county" -gt "$x_stop_point" ] && \
          break
      done
      unset IFS
      print ''
      y_start_point=$((y_start_point+1))
      [ "$y_start_point" -gt "$y_stop_point" ] && \
        break
    done
    return 0
  }

  invert() {
    (! isfile /tmp/libmisc_2d_arr/$arrname/array_count || \
     ! isfile /tmp/libmisc_2d_arr/$arrname/indice_count) && {
      print "Error: attempted reference undeclared array"
      fail
      return 1
    }
    # read x as y and y as x
    invert_x_ln=$(cat /tmp/libmisc_2d_arr/$arrname/array_count)
    invert_y_ln=$(cat /tmp/libmisc_2d_arr/$arrname/indice_count)
    # create blank array with inverted x y ln
    arrname_orig="$arrname"
    x_ln_orig=$(cat /tmp/libmisc_2d_arr/$arrname/indice_count)
    y_ln_orig=$(cat /tmp/libmisc_2d_arr/$arrname/array_count)
    draw_inverted() {
      invert_x_count=0
      while true; do
        invert_x_count=$((invert_x_count+1))
        [ "$invert_x_count" -gt "$x_ln_orig" ] && \
          break
        print -n $(2d_arr qc $arrname $invert_x_count) && \
        print ''
      done
    }
    arr_contents_orig=$(draw_inverted)
    blank=1 2d_arr create $arrname $invert_x_ln $invert_y_ln
    invert_y_count=0
    IFS=$'\n'
    for invert_working in $=arr_contents_orig; do
      invert_y_count=$((invert_y_count+1))
      invert_x_count=0
      IFS=$' '
      for do_invert in $=invert_working; do
        invert_x_count=$((invert_x_count+1))
        (2d_arr update "$arrname_orig" "$do_invert" "$invert_x_count" "$invert_y_count")
      done
      unset IFS
    done
    return 0
  }
  $request $arrname $op_two $op_three $op_four $op_five $op_six
}
