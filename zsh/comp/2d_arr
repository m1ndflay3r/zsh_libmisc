#!/usr/bin/env zsh

2d_arr() {
  ## fetch input
  request="$1"
  arrname="$2"
  op_three="$3"
  op_four="$4"
  op_five="$5"
  op_six="$6"

  ## fail printout
  fail() {
    print "See man/libmisc/2d_arr.md for usage"
  }

  ## exit with fail status if no input given
  [ -z "$arrname" ] && \
    print "Error: insufficient input!" && \
    print '' && \
    fail && \
    return 1

  ## validate input
  valid_comm_list=('create'
                   'delete'
                   'query'
                   'query_grid'
                   'query_col'
                   'query_row'
                   'query_adj'
                   'search'
                   'update'
                   'draw'
                   'create_link'
                   'query_link'
                   'delete_link'
                   'update_section'
                   'query_section'
                   'invert'
                   'invert_section'
                   'mirror_x'
                   'mirror_y'
                   'rotate_90'
                   'rotate_180'
                   'rotate_270'
                   'anti_invert'
                   'flush'
                   'resize_arr'
                   'delete_row'
                   'delete_col'
                   'insert_row'
                   'insert_col'
                   'readin_col'
                   'readin_row'
                   'readin_section'
                   'del'
                   'cr'
                   'ss'
                   'upd'
                   'qu'
                   'dr'
                   'qg'
                   'qc'
                   'qr'
                   'qa'
                   'cl'
                   'ql'
                   'dl'
                   'us'
                   'qs'
                   'inv'
                   'mx'
                   'my'
                   'is'
                   'r9'
                   'r18'
                   'r27'
                   'ai'
                   'fl'
                   'ra'
                   'dlr'
                   'dlc'
                   'inr'
                   'inc'
                   'ric'
                   'rir'
                   'ris')
  invalid=1
  for chk_valid in $=valid_comm_list; do
    [ "$chk_valid" = "$request" ] && \
      invalid=0
  done
  [ "$invalid" = 1 ] && \
    print "Error: received invalid command" && \
    fail && \
    return 1

  # command aliases for brevity (alias wasnt working for whatever reason so now we're using case statement)
  case $request in
    (del) request=delete ;;
    (cr) request=create ;;
    (ss) request=search ;;
    (upd) request=update ;;
    (qu) request=query ;;
    (dr) request=draw ;;
    (qg) request=query_grid ;;
    (qr) request=query_row ;;
    (qc) request=query_col ;;
    (qa) request=query_adj ;;
    (cl) request=create_link ;;
    (ql) request=query_link ;;
    (dl) request=delete_link ;;
    (us) request=update_section ;;
    (qs) request=query_section ;;
    (inv) request=invert ;;
    (mx) request=mirror_x ;;
    (my) request=mirror_y ;;
    (is) request=invert_section ;;
    (r9) request=rotate_90 ;;
    (r18) request=rotate_180 ;;
    (r27) request=rotate_270 ;;
    (ai) request=anti_invert ;;
    (fl) request=flush ;;
    (ra) request=resize_arr ;;
    (dlr) request=delete_row ;;
    (dlc) request=delete_col ;;
    (inr) request=insert_row ;;
    (inc) request=insert_col ;;
    (ric) request=readin_col ;;
    (rir) request=readin_row ;;
    (ris) request=readin_section ;;
  esac

  ## env setup
  autoload nrandom
  autoload isfile
  autoload getstrln
  autoload chkvldint
  autoload revstr

  # there's no reason this should ever be empty, but we'll account for it in case of weird setup
  [ -z "$UID" ] && {
    export UID=$(nrandom)
  }

  [ -d '/tmp' ] && {
    twodee_working_dir="/tmp/.libmisc"$UID""
  } || {
    twodee_working_dir=""$HOME"/.libmisc"
  }

  ! isfile "$twodee_working_dir" && {
    mkdir "$twodee_working_dir"
  }

  # create working dir if not found
  ! isfile "$twodee_working_dir"/libmisc_2d_arr && \
    mkdir "$twodee_working_dir"/libmisc_2d_arr

  ## define functions
  # convert input provided on stdin to zsh-format arrays
  create() {
    chkvldint $arrname && {
      print "Error: arrname cannot be int"
      fail
      return 1
    }
    [ "$blank" = 1 ] && {
      [ -z "$op_three" ] && \
        op_three=10
      [ -z "$op_four" ] && \
        op_four=10
      (! chkvldint $op_three || ! chkvldint $op_four) && {
        print "Error: x_ln and y_ln must be int"
        fail
        return 1
      }
      ([ "$op_three" -le 0 ] || [ "$op_four" -le 0 ]) && {
        print "Error: x_ln and y_ln must be > 0"
        fail
        return 1
      }
    }
    isfile "$twodee_working_dir"/libmisc_2d_arr/$arrname && \
      rm -rf "$twodee_working_dir"/libmisc_2d_arr/$arrname
    mkdir "$twodee_working_dir"/libmisc_2d_arr/$arrname
    touch "$twodee_working_dir"/libmisc_2d_arr/$arrname/input_arrays
    create_blank() {
      x_length="$op_three"
      y_length="$op_four"
      y_count=0
      while true; do
        y_count=$((y_count+1))
        [ "$y_count" = $((y_length+1)) ] && \
          break
        x_count=0
        while true; do
          x_count=$((x_count+1))
          [ "$x_count" = $((x_length+1)) ] && \
            break
          [ ! -z "$init_char" ] && \
            print -n "$init_char" \
          || \
            print -n '.'
        done
        print ''
      done
    }
    [ "$blank" = 1 ] && \
      conv_to_arr_input=$(create_blank) || \
      conv_to_arr_input=$(cat)
    unset blank
    ([[ "$conv_to_arr_input" = *' '* ]] || \
     [[ "$conv_to_arr_input" = *'\'* ]]) && {
      print "Error: indice cannot be space or backslash"
      fail
      return 1
    }
    [ "$padded" = 1 ] && {
      longest_row=0
      IFS=$'\n'
      for cr_row in $=conv_to_arr_input; do
        cr_row_ln=$(getstrln $cr_row)
        [ "$cr_row_ln" -gt "$longest_row" ] && {
          longest_row=$cr_row_ln
        }
      done
      unset cr_out_padded
      declare -a cr_out_padded
      for cr_row in $=conv_to_arr_input; do
        until [ $(getstrln $cr_row) = $longest_row ]; do
          [ ! -z "$pad_char" ] && \
          [ "$pad_char" != ' ' ] && \
          [ "$pad_char" != $'\n' ] && {
            cr_row=""$cr_row""$pad_char""
          } || {
            cr_row=""$cr_row"."
          }
        done
        cr_out_padded+=("$cr_row")
      done
      unset IFS
      conv_to_arr_input=$(\
        for do_out_pad in $=cr_out_padded; do
          print "$do_out_pad"
        done\
      )
    } || {
      longest_row=0
      IFS='$\n'
      for do_get_longest in $=conv_to_arr_input; do
        [ $(getstrln "$do_get_longest") -gt "$longest_row" ] && {
          longest_row=$(getstrln "$do_get_longest")
        }
      done
      for do_check_longest in $=conv_to_arr_input; do
        [ $(getstrln "$do_check_longest") -lt "$longest_row" ] && {
          (! [ -z "$DEBUGWARN" ] && \
          [ "$DEBUGWARN" = "1" ]) && {
            print "Warning: non-uniform length detected, but padded is not set."
          }
          unset IFS
          (print "$conv_to_arr_input" | padded=1 2d_arr create $arrname)
          return $?
        }
      done
      unset IFS
    }
    array_count=0
    indice_count=0
    IFS=$'\n'
    for cr_array in $=conv_to_arr_input; do
      indice_placeholder=0
      array_count=$((array_count+1))
      print -n ""$arrname"_y_array_"$array_count"=(" >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/input_arrays
      while IFS= noglob read -r -k1 -d '' -u0 array_indice; do
        print -n "'" >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/input_arrays
        print -n "$array_indice" >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/input_arrays
        print "'" >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/input_arrays
        indice_placeholder=$((indice_placeholder+1))
      done < <(IFS= noglob print -rn "$cr_array")
      [ "$indice_placeholder" -gt "$indice_count" ] && \
        indice_count="$indice_placeholder"
      print ')' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/input_arrays
    done
    unset IFS
    print "$array_count" > "$twodee_working_dir"/libmisc_2d_arr/$arrname/array_count
    print "$indice_count" > "$twodee_working_dir"/libmisc_2d_arr/$arrname/indice_count
  }

  # update indice at x y coords in array
  update() {
    # char to be swapped in
    update_char="$2"
    x_coord="$3"
    y_coord="$4"
    (! isfile "$twodee_working_dir"/libmisc_2d_arr/$arrname/array_count || ! isfile "$twodee_working_dir"/libmisc_2d_arr/$arrname/indice_count) && {
      print "Error: attempted reference undeclared array"
      fail
      return 1
    }
    array_count=$(cat "$twodee_working_dir"/libmisc_2d_arr/$arrname/array_count)
    indice_count=$(cat "$twodee_working_dir"/libmisc_2d_arr/$arrname/indice_count)
    # error if insufficient input
    ([ -z "$x_coord" ] || [ -z "$y_coord" ]) && {
      print "Error: received blank coord!"
      fail
      return 1
    }
    # error if x or y not int
    (! chkvldint "$x_coord" || ! chkvldint "$y_coord") && {
      print "Error: x and y must be int"
      fail
      return 1
    }
    # error if out of bounds update attempt
    ([ "$x_coord" -gt "$indice_count" ] || [ "$y_coord" -gt "$array_count" ] || [ "$x_coord" -le 0 ] || [ "$y_coord" -le 0 ]) && {
      print "OOB"
      return 3
    }
    # error if attempt to use space or newline in update char
    ([[ "$update_char" = *$'\n'* ]] || [[ "$update_char" = *' '* ]] || [[ "$update_char" = *'\'* ]]) && {
      print "Error: cannot use space, backslash, or newline for updchar"
      fail
      return 1
    }
    # generate session ID (multithread clash prevention)
    zsession_id=$(nrandom)
    # write position update script (I know, I know)
    rm -rf "$twodee_working_dir"/libmisc_2d_arr/$arrname/working_$zsession_id
    #env setup
    print '#!/usr/bin/env zsh' > "$twodee_working_dir"/libmisc_2d_arr/$arrname/working_$zsession_id
    print '' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/working_$zsession_id
    print "arrname="$arrname"" >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/working_$zsession_id
    print -n 'twodee_working_dir="' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/working_$zsession_id
    print -n "$twodee_working_dir" >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/working_$zsession_id
    print '"' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/working_$zsession_id
    #fetch input arrays
    print 'source "$twodee_working_dir"/libmisc_2d_arr/$arrname/input_arrays' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/working_$zsession_id
    print 'fpath=(/usr/lib/zsh_libmisc/libmisc.zwc $fpath)' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/working_$zsession_id
    print 'autoload isfile' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/working_$zsession_id
    print 'isfile "$twodee_working_dir"/libmisc_2d_arr/$arrname/ledger && \' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/working_$zsession_id
    print 'source "$twodee_working_dir"/libmisc_2d_arr/$arrname/ledger' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/working_$zsession_id
    #env setup
    print 'rm -rf "$twodee_working_dir"/libmisc_2d_arr/$arrname/array_update_$zsession_id' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/working_$zsession_id
    print "x_coord="$x_coord"" >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/working_$zsession_id
    print "y_coord="$y_coord"" >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/working_$zsession_id
    print "zsession_id="$zsession_id"" >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/working_$zsession_id
    print -n "update_char='" >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/working_$zsession_id
    print -n "$update_char" >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/working_$zsession_id
    print "'" >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/working_$zsession_id
    #print start of updated array
    print -n 'print -n "' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/working_$zsession_id
    print -n "$arrname" >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/working_$zsession_id
    print '_y_array_"$y_coord"=(" > "$twodee_working_dir"/libmisc_2d_arr/$arrname/array_update_$zsession_id' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/working_$zsession_id
    #iterate over each indice in target array, add indice as is if not target, add swap char instead if ta>
    print 'indice_count=0' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/working_$zsession_id

    print -n 'for indice in $=' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/working_$zsession_id
    print -n "$arrname" >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/working_$zsession_id
    print -n '_y_array_' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/working_$zsession_id
    print -n "$y_coord" >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/working_$zsession_id
    print '; do' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/working_$zsession_id

    print '  indice_count=$((indice_count+1))' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/working_$zsession_id

    print '  [ "$indice_count" = "$x_coord" ] && \' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/working_$zsession_id

    print -n 'print -n "' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/working_$zsession_id
    print -n "'" >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/working_$zsession_id
    print '" >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/array_update_$zsession_id && \' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/working_$zsession_id

    print -n 'print -n "' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/working_$zsession_id
    print -n "$update_char" >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/working_$zsession_id
    print '" >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/array_update_$zsession_id && \' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/working_$zsession_id

    print -n 'print "' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/working_$zsession_id
    print -n "'" >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/working_$zsession_id
    print '" >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/array_update_$zsession_id || \' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/working_$zsession_id

    print -n '(print -n "' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/working_$zsession_id
    print -n "'" >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/working_$zsession_id
    print '" >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/array_update_$zsession_id && \' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/working_$zsession_id

    print -n 'print -n "' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/working_$zsession_id
    print -n '$indice' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/working_$zsession_id
    print '">> "$twodee_working_dir"/libmisc_2d_arr/$arrname/array_update_$zsession_id && \' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/working_$zsession_id

    print -n 'print "' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/working_$zsession_id
    print -n "'" >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/working_$zsession_id
    print '" >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/array_update_$zsession_id)' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/working_$zsession_id

    print 'done' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/working_$zsession_id
    print "print ')' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/array_update_$zsession_id" >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/working_$zsession_id
    chmod 755 "$twodee_working_dir"/libmisc_2d_arr/$arrname/working_$zsession_id
    "$twodee_working_dir"/libmisc_2d_arr/$arrname/working_$zsession_id
    source "$twodee_working_dir"/libmisc_2d_arr/$arrname/array_update_$zsession_id
    ! isfile "$twodee_working_dir"/libmisc_2d_arr/$arrname/ledger && \
      touch "$twodee_working_dir"/libmisc_2d_arr/$arrname/ledger
    # utilize lock file for ledger write (multithread clash prevention)
    isfile "$twodee_working_dir"/libmisc_2d_arr/$arrname/ledger.lck && {
      until ! isfile "$twodee_working_dir"/libmisc_2d_arr/$arrname/ledger.lck; do
        sleep 1
      done
    }
    touch "$twodee_working_dir"/libmisc_2d_arr/$arrname/ledger.lck
    cat "$twodee_working_dir"/libmisc_2d_arr/$arrname/array_update_$zsession_id >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/ledger
    print '' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/ledger
    rm -rf "$twodee_working_dir"/libmisc_2d_arr/$arrname/ledger.lck
    rm -rf "$twodee_working_dir"/libmisc_2d_arr/$arrname/array_update_$zsession_id
    rm -rf "$twodee_working_dir"/libmisc_2d_arr/$arrname/working_$zsession_id
  }

  # delete array
  delete() {
    (! isfile "$twodee_working_dir"/libmisc_2d_arr || ! isfile "$twodee_working_dir"/libmisc_2d_arr/$arrname) && \
      return 0 \
    || \
      rm -rf "$twodee_working_dir"/libmisc_2d_arr/$arrname
      return 0
  }

  # retrieve contents of indice at x y coord
  query() {
    x_coord="$op_three"
    y_coord="$op_four"
    (! isfile "$twodee_working_dir"/libmisc_2d_arr/$arrname/array_count || ! isfile "$twodee_working_dir"/libmisc_2d_arr/$arrname/indice_count) && {
      print "Error: attempted reference undeclared array"
      fail
      return 1
    }
    array_count=$(cat "$twodee_working_dir"/libmisc_2d_arr/$arrname/array_count)
    indice_count=$(cat "$twodee_working_dir"/libmisc_2d_arr/$arrname/indice_count)
    # error if insufficient input
    ([ -z "$x_coord" ] || [ -z "$y_coord" ]) && {
      print "Error: received empty query"
      fail
      return 1
    }
    (! chkvldint "$x_coord" || ! chkvldint "$y_coord") && {
      print "Error: x and y must be int"
      fail
      return 1
    }
    # error if out of bounds query attempt
    ([ "$x_coord" -gt "$indice_count" ] || [ "$y_coord" -gt "$array_count" ] || [ "$x_coord" -le 0 ] || [ "$y_coord" -le 0 ]) && {
      print "OOB"
      return 3
    }
    # generate session id (multithread clash prevention)
    zsession_id=$(nrandom)
    rm -rf "$twodee_working_dir"/libmisc_2d_arr/$arrname/query_$zsession_id
    # write position query script (I know, I know)
    print '#!/usr/bin/env zsh' > "$twodee_working_dir"/libmisc_2d_arr/$arrname/query_$zsession_id
    print '' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/query_$zsession_id
    print 'fpath=(/usr/lib/zsh_libmisc/libmisc.zwc $fpath)' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/query_$zsession_id
    print 'autoload isfile' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/query_$zsession_id
    #env setup
    print "x_coord="$x_coord"" >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/query_$zsession_id
    print "y_coord="$y_coord"" >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/query_$zsession_id
    print "arrname="$arrname"" >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/query_$zsession_id
    print -n 'twodee_working_dir="' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/query_$zsession_id
    print -n "$twodee_working_dir" >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/query_$zsession_id
    print '"' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/query_$zsession_id
    print "source "$twodee_working_dir"/libmisc_2d_arr/$arrname/input_arrays" >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/query_$zsession_id
    print 'isfile "$twodee_working_dir"/libmisc_2d_arr/$arrname/ledger && \' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/query_$zsession_id
    print "source "$twodee_working_dir"/libmisc_2d_arr/$arrname/ledger" >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/query_$zsession_id
    print 'indice_count=0' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/query_$zsession_id
    #iterate over each indice until reaching x coord
    print -n 'for indice in $=' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/query_$zsession_id
    print -n "$arrname" >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/query_$zsession_id
    print -n '_y_array_' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/query_$zsession_id
    print -n "$y_coord" >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/query_$zsession_id
    print '; do' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/query_$zsession_id

    print 'indice_count=$((indice_count+1))' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/query_$zsession_id
    print '[ "$indice_count" = "$x_coord" ] && \' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/query_$zsession_id
    print '  print "$indice" && \' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/query_$zsession_id
    print '  break' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/query_$zsession_id

    print 'done' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/query_$zsession_id
    chmod 755 "$twodee_working_dir"/libmisc_2d_arr/$arrname/query_$zsession_id
    query_result=$("$twodee_working_dir"/libmisc_2d_arr/$arrname/query_$zsession_id)
    print "$query_result"
    rm -rf "$twodee_working_dir"/libmisc_2d_arr/$arrname/query_$zsession_id
  }

  query_grid() {
    qg_input="$op_three"
    (! isfile "$twodee_working_dir"/libmisc_2d_arr/$arrname/indice_count || ! isfile "$twodee_working_dir"/libmisc_2d_arr/$arrname/array_count) && {
      print "Error: attempted reference undeclared array"
      fail
      return 1
    }
    ([ "$qg_input" != '-x' ] && [ "$qg_input" != '-y' ] && [ "$qg_input" != '-d' ]) && {
      x_ln=$(cat "$twodee_working_dir"/libmisc_2d_arr/$arrname/indice_count)
      y_ln=$(cat "$twodee_working_dir"/libmisc_2d_arr/$arrname/array_count)
      print ""$x_ln" "$y_ln""
      return 0
    } || [ "$qg_input" = '-x' ] && {
      x_ln=$(cat "$twodee_working_dir"/libmisc_2d_arr/$arrname/indice_count)
      print "$x_ln"
      return 0
    } || [ "$qg_input" = '-y' ] && {
      y_ln=$(cat "$twodee_working_dir"/libmisc_2d_arr/$arrname/array_count)
      print "$y_ln"
      return 0
    } || [ "$qg_input" = '-d' ] && {
      qg_diag_counter=1
      qg_adj_to_count=$(2d_arr qa $arrname 1 1 se)
      IFS=$'\n'
      for do_qg_d in $=qg_adj_to_count; do
        qg_diag_counter=$((qg_diag_counter+1))
      done
      unset IFS
      print "$qg_diag_counter"
      return 0
    }
  }

  query_row() {
    y_coord="$op_three"
    ! isfile "$twodee_working_dir"/libmisc_2d_arr/$arrname && {
      print "Error: attempted reference undeclared array"
      fail
      return 1
    }
    [ -z "$y_coord" ] && {
      print "Error: received empty row query!"
      fail
      return 1
    }
    ! chkvldint "$y_coord" && {
      print "Error: y must be int"
      fail
      return 1
    }
    y_ln=$(cat "$twodee_working_dir"/libmisc_2d_arr/$arrname/array_count)
    ([ "$y_coord" -gt "$y_ln" ] || [ "$y_coord" -le 0 ]) && {
      print "OOB"
      return 3
    }
    # generate session id (multithread clash prevention)
    zsession_id=$(nrandom)
    rm -rf "$twodee_working_dir"/libmisc_2d_arr/$arrname/query_row_$zsession_id
    print '#!/usr/bin/env zsh' > "$twodee_working_dir"/libmisc_2d_arr/$arrname/query_row_$zsession_id
    print 'fpath=(/usr/lib/zsh_libmisc/libmisc.zwc $fpath)' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/query_row_$zsession_id
    print 'autoload isfile' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/query_row_$zsession_id
    print "y_coord="$y_coord"" >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/query_row_$zsession_id
    print "arrname="$arrname"" >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/query_row_$zsession_id
    print -n 'twodee_working_dir="' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/query_row_$zsession_id
    print -n "$twodee_working_dir" >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/query_row_$zsession_id
    print '"' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/query_row_$zsession_id
    print "source "$twodee_working_dir"/libmisc_2d_arr/$arrname/input_arrays" >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/query_row_$zsession_id
    print 'isfile "$twodee_working_dir"/libmisc_2d_arr/$arrname/ledger && {' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/query_row_$zsession_id
    print "  source "$twodee_working_dir"/libmisc_2d_arr/$arrname/ledger" >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/query_row_$zsession_id
    print '}' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/query_row_$zsession_id
    print -n 'print $' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/query_row_$zsession_id
    print -n "$arrname" >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/query_row_$zsession_id
    print -n '_y_array_' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/query_row_$zsession_id
    print -n "$y_coord" >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/query_row_$zsession_id
    print '[@]' >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/query_row_$zsession_id
    chmod 755 "$twodee_working_dir"/libmisc_2d_arr/$arrname/query_row_$zsession_id
    print $("$twodee_working_dir"/libmisc_2d_arr/$arrname/query_row_$zsession_id)
    rm -rf "$twodee_working_dir"/libmisc_2d_arr/$arrname/query_row_$zsession_id
  }

  query_col() {
    x_coord="$op_three"
    ! isfile "$twodee_working_dir"/libmisc_2d_arr/$arrname && {
      print "Error: attempted reference undeclared array"
      fail
      return 1
    }
    [ -z "$x_coord" ] && {
      print "Error: received empty col query!"
      fail
      return 1
    }
    ! chkvldint "$x_coord" && {
      print "Error: x must be int"
      fail
      return 1
    }
    x_ln=$(cat "$twodee_working_dir"/libmisc_2d_arr/$arrname/indice_count)
    ([ "$x_coord" -gt "$x_ln" ] || [ "$x_coord" -le 0 ]) && {
      print "OOB"
      return 3
    }
    y_ln=$(cat "$twodee_working_dir"/libmisc_2d_arr/$arrname/array_count)
    y_counter=0
    while true; do
      y_counter=$((y_counter+1))
      [ $y_counter -gt $y_ln ] && \
        break
      2d_arr query $arrname $x_coord $y_counter
    done
  }

  query_adj() {
    x_coord="$op_three"
    y_coord="$op_four"
    direction="$op_five"
    (! isfile "$twodee_working_dir"/libmisc_2d_arr/$arrname/array_count || ! isfile "$twodee_working_dir"/libmisc_2d_arr/$arrname/indice_count) && {
      print "Error: attempted reference undeclared array"
      fail
      return 1
    }
    y_ln=$(cat "$twodee_working_dir"/libmisc_2d_arr/$arrname/array_count)
    x_ln=$(cat "$twodee_working_dir"/libmisc_2d_arr/$arrname/indice_count)
    # error if insufficient input
    ([ -z "$x_coord" ] || [ -z "$y_coord" ]) && {
      print "Error: received empty query"
      fail
      return 1
    }
    (! chkvldint "$x_coord" || ! chkvldint "$y_coord") && {
      print "Error: x and y must be int"
      fail
      return 1
    }
    # error if out of bounds query attempt
    ([ "$x_coord" -gt "$x_ln" ] || [ "$y_coord" -gt "$y_ln" ] || [ "$x_coord" -le 0 ] || [ "$y_coord" -le 0 ]) && {
      print "OOB"
      return 3
    }
    # error if direction invalid
    valid_directions=('nw'
                      'n'
                      'ne'
                      'e'
                      'se'
                      's'
                      'sw'
                      'w')
    direction_invalid=1
    for check_valid_direction in $=valid_directions; do
      [ "$check_valid_direction" = "$direction" ] && {
        direction_invalid=0
        break
      }
    done
    [ "$direction_invalid" = 1 ] && {
      print "Error: direction must be nw, n, ne, e, se, s, sw, or w"
      fail
      return 1
    }
    [ "$direction" = "nw" ] && {
      while true; do
        x_coord=$((x_coord-1))
        y_coord=$((y_coord-1))
        ([ "$x_coord" -le 0 ] || [ "$y_coord" -le 0 ]) && \
          return 0
        print ""$(2d_arr query $arrname $x_coord $y_coord)" "$x_coord" "$y_coord""
        [ "$single" = "1" ] && \
          return 0
      done
    }
    [ "$direction" = "n" ] && {
      while true; do
        y_coord=$((y_coord-1))
        [ "$y_coord" -le 0 ] && \
          return 0
        print ""$(2d_arr query $arrname $x_coord $y_coord)" "$x_coord" "$y_coord""
        [ "$single" = "1" ] && \
          return 0
      done
    }
    [ "$direction" = "ne" ] && {
      while true; do
        x_coord=$((x_coord+1))
        y_coord=$((y_coord-1))
        ([ "$x_coord" -gt "$x_ln" ] || [ "$y_coord" -le 0 ]) && \
          return 0
        print ""$(2d_arr query $arrname $x_coord $y_coord)" "$x_coord" "$y_coord""
        [ "$single" = "1" ] && \
          return 0
      done
    }
    [ "$direction" = "e" ] && {
      while true; do
        x_coord=$((x_coord+1))
        [ "$x_coord" -gt "$x_ln" ] && \
          return 0
        print ""$(2d_arr query $arrname $x_coord $y_coord)" "$x_coord" "$y_coord""
        [ "$single" = "1" ] && \
          return 0
      done
    }
    [ "$direction" = "se" ] && {
      while true; do
        x_coord=$((x_coord+1))
        y_coord=$((y_coord+1))
        ([ "$x_coord" -gt "$x_ln" ] || [ "$y_coord" -gt "$y_ln" ]) && \
          return 0
        print ""$(2d_arr query $arrname $x_coord $y_coord)" "$x_coord" "$y_coord""
        [ "$single" = "1" ] && \
          return 0
      done
    }
    [ "$direction" = "s" ] && {
      while true; do
        y_coord=$((y_coord+1))
        [ "$y_coord" -gt "$y_ln" ] && \
          return 0
        print ""$(2d_arr query $arrname $x_coord $y_coord)" "$x_coord" "$y_coord""
        [ "$single" = "1" ] && \
          return 0
      done
    }
    [ "$direction" = "sw" ] && {
      while true; do
        x_coord=$((x_coord-1))
        y_coord=$((y_coord+1))
        ([ "$x_coord" -le 0 ] || [ "$y_coord" -gt "$y_ln" ]) && \
          return 0
        print ""$(2d_arr query $arrname $x_coord $y_coord)" "$x_coord" "$y_coord""
        [ "$single" = "1" ] && \
          return 0
      done
    }
    [ "$direction" = "w" ] && {
      while true; do
        x_coord=$((x_coord-1))
        [ "$x_coord" -le 0 ] && \
          return 0
        print ""$(2d_arr query $arrname $x_coord $y_coord)" "$x_coord" "$y_coord""
        [ "$single" = "1" ] && \
          return 0
      done
    }
  }

  create_link() {
    x_coord="$op_three"
    y_coord="$op_four"
    xx_coord="$op_five"
    yy_coord="$op_six"
    (! isfile "$twodee_working_dir"/libmisc_2d_arr/$arrname/array_count || ! isfile "$twodee_working_dir"/libmisc_2d_arr/$arrname/indice_count) && {
      print "Error: attempted reference undeclared array"
      fail
      return 1
    }
    y_ln=$(cat "$twodee_working_dir"/libmisc_2d_arr/$arrname/array_count)
    x_ln=$(cat "$twodee_working_dir"/libmisc_2d_arr/$arrname/indice_count)
    # error if insufficient input
    ([ -z "$x_coord" ] || [ -z "$y_coord" ] || [ -z "$xx_coord" ] || [ -z "$yy_coord" ]) && {
      print "Error: received empty link req"
      fail
      return 1
    }
    (! chkvldint "$x_coord" || ! chkvldint "$y_coord" || \
    ! chkvldint "$xx_coord" || ! chkvldint "$yy_coord") && {
      print "Error: x and y must be int"
      fail
      return 1
    }
    # error if out of bounds link attempt
    ([ "$x_coord" -gt "$x_ln" ] || [ "$y_coord" -gt "$y_ln" ] || [ "$xx_coord" -gt "$x_ln" ] || [ "$yy_coord" -gt "$y_ln" ] || \
     [ "$x_coord" -le 0 ] || [ "$y_coord" -le 0 ] || [ "$xx_coord" -le 0 ] || [ "$yy_coord" -le 0 ]) && {
      print "OOB"
      return 3
    }
    ! isfile "$twodee_working_dir"/libmisc_2d_arr/$arrname/links && \
      mkdir "$twodee_working_dir"/libmisc_2d_arr/$arrname/links
    isfile "$twodee_working_dir"/libmisc_2d_arr/$arrname/links/"$x_coord""$y_coord" && {
      chk_link_dup=$(cat "$twodee_working_dir"/libmisc_2d_arr/$arrname/links/"$x_coord""$y_coord")
      IFS=$'\n'
      for chk_link in $=chk_link_dup; do
        [ "$chk_link" = ""$xx_coord" "$yy_coord"" ] && \
          return 0
      done
      unset IFS
    } || \
    touch "$twodee_working_dir"/libmisc_2d_arr/$arrname/links/"$x_coord""$y_coord"
    # use lock file (multithread clash prevention)
    isfile "$twodee_working_dir"/libmisc_2d_arr/$arrname/links/"$x_coord""$y_coord".lck && {
      until ! isfile "$twodee_working_dir"/libmisc_2d_arr/$arrname/links/"$x_coord""$y_coord".lck; do
        sleep 1
      done
    }
    touch "$twodee_working_dir"/libmisc_2d_arr/$arrname/links/"$x_coord""$y_coord".lck
    print ""$xx_coord" "$yy_coord"" >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/links/"$x_coord""$y_coord"
    rm -rf "$twodee_working_dir"/libmisc_2d_arr/$arrname/links/"$x_coord""$y_coord".lck
    ! [ "$mono" = 1 ] && \
      2d_arr create_link $arrname $xx_coord $yy_coord $x_coord $y_coord
    return 0
  }

  query_link() {
    x_coord="$op_three"
    y_coord="$op_four"
    (! isfile "$twodee_working_dir"/libmisc_2d_arr/$arrname/array_count || ! isfile "$twodee_working_dir"/libmisc_2d_arr/$arrname/indice_count) && {
      print "Error: attempted reference undeclared array"
      fail
      return 1
    }
    y_ln=$(cat "$twodee_working_dir"/libmisc_2d_arr/$arrname/array_count)
    x_ln=$(cat "$twodee_working_dir"/libmisc_2d_arr/$arrname/indice_count)
    # error if insufficient input
    ([ -z "$x_coord" ] || [ -z "$y_coord" ]) && {
      print "Error: received empty link query"
      fail
      return 1
    }
    (! chkvldint "$x_coord" || ! chkvldint "$y_coord") && {
      print "Error: x and y must be int"
      fail
      return 1
    }
    # error if out of bounds link attempt
    ([ "$x_coord" -gt "$x_ln" ] || [ "$y_coord" -gt "$y_ln" ] || \
     [ "$x_coord" -le 0 ] || [ "$y_coord" -le 0 ]) && {
      print "OOB"
      return 3
    }
    # error if link not exist
    (! isfile "$twodee_working_dir"/libmisc_2d_arr/$arrname/links || ! isfile "$twodee_working_dir"/libmisc_2d_arr/$arrname/links/"$x_coord""$y_coord") && {
      print "none"
      return 4
    }
    cat "$twodee_working_dir"/libmisc_2d_arr/$arrname/links/"$x_coord""$y_coord"
    return 0
  }

  delete_link() {
    x_coord="$op_three"
    y_coord="$op_four"
    xx_coord="$op_five"
    yy_coord="$op_six"
    (! isfile "$twodee_working_dir"/libmisc_2d_arr/$arrname/array_count || ! isfile "$twodee_working_dir"/libmisc_2d_arr/$arrname/indice_count) && {
      print "Error: attempted reference undeclared array"
      fail
      return 1
    }
    y_ln=$(cat "$twodee_working_dir"/libmisc_2d_arr/$arrname/array_count)
    x_ln=$(cat "$twodee_working_dir"/libmisc_2d_arr/$arrname/indice_count)
    # error if insufficient input
    ([ -z "$x_coord" ] || [ -z "$y_coord" ] || [ -z "$xx_coord" ] || [ -z "$yy_coord" ]) && {
      print "Error: received empty unlink req"
      fail
      return 1
    }
    (! chkvldint "$x_coord" || ! chkvldint "$y_coord" || \
    ! chkvldint "$xx_coord" || ! chkvldint "$yy_coord") && {
      print "Error: x and y must be int"
      fail
      return 1
    }
    # error if out of bounds
    ([ "$x_coord" -gt "$x_ln" ] || [ "$y_coord" -gt "$y_ln" ] || \
     [ "$xx_coord" -gt "$x_ln" ] || [ "$yy_coord" -gt "$y_ln" ] || \
     [ "$x_coord" -le 0 ] || [ "$y_coord" -le 0 ] || \
     [ "$xx_coord" -le 0 ] || [ "$yy_coord" -le 0 ]) && {
      print "OOB"
      return 3
    }
    # return 0 if link not exist
    (! isfile "$twodee_working_dir"/libmisc_2d_arr/$arrname/links || ! isfile "$twodee_working_dir"/libmisc_2d_arr/$arrname/links/"$x_coord""$y_coord") && {
      return 0
    }
    # read links into variable, blank out links
    fetch_current_links=$(cat "$twodee_working_dir"/libmisc_2d_arr/$arrname/links/"$x_coord""$y_coord")
    print -n '' > "$twodee_working_dir"/libmisc_2d_arr/$arrname/links/"$x_coord""$y_coord"
    # divide up links by newline, print back to links if not unlink target
    IFS=$'\n'
    for zlinks in $=fetch_current_links; do
      [ "$zlinks" != ""$xx_coord" "$yy_coord"" ] && \
        print "$zlinks" >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/links/"$x_coord""$y_coord"
    done
    unset IFS
    # delete links if blank after unlink
    fetch_adjusted_links=$(cat "$twodee_working_dir"/libmisc_2d_arr/$arrname/links/"$x_coord""$y_coord")
    [ -z "$fetch_adjusted_links" ] && \
      rm -rf "$twodee_working_dir"/libmisc_2d_arr/$arrname/links/"$x_coord""$y_coord"
    return 0
  }

  # search array for indices containing value
  search() {
    do_search=$op_three
    (! isfile "$twodee_working_dir"/libmisc_2d_arr/$arrname/array_count || ! isfile "$twodee_working_dir"/libmisc_2d_arr/$arrname/indice_count) && \
      print "Error: attempted reference undeclared array" && \
      fail && \
      return 1
    array_count=$(cat "$twodee_working_dir"/libmisc_2d_arr/$arrname/array_count)
    indice_count=$(cat "$twodee_working_dir"/libmisc_2d_arr/$arrname/indice_count)
    x_coord=0
    y_coord=0
    found=0
    while true; do
      y_coord=$((y_coord+1))
      [ "$y_coord" = "$((array_count+1))" ] && \
        break
      [[ "$(2d_arr query_row $arrname $y_coord)" = *"$do_search"* ]] && {
        x_coord=0
        while true; do
          x_coord=$((x_coord+1))
          [ "$x_coord" = "$((indice_count+1))" ] && \
            break
          test_position=$(2d_arr query $arrname $x_coord $y_coord)
          [ "$test_position" = "$do_search" ] && \
            print ""$x_coord" "$y_coord""
        done
      }
    done
  }

  draw() {
    draw_proto() {
      (! isfile "$twodee_working_dir"/libmisc_2d_arr/$arrname/array_count || ! isfile "$twodee_working_dir"/libmisc_2d_arr/$arrname/indice_count) && \
        print "Error: attempted reference undeclared array" && \
        fail && \
        return 1
      array_count=$(cat "$twodee_working_dir"/libmisc_2d_arr/$arrname/array_count)
      indice_count=$(cat "$twodee_working_dir"/libmisc_2d_arr/$arrname/indice_count)
      x_coord=0
      y_coord=0
      while true; do
        y_coord=$((y_coord+1))
        [ "$y_coord" = "$((array_count+1))" ] && \
          break
        2d_arr query_row $arrname $y_coord
      done
    }
    draw_buffer=$(draw_proto)
    print "$draw_buffer"
  }

  update_section() {
    x_coord="$op_three"
    y_coord="$op_four"
    xx_coord="$op_five"
    yy_coord="$op_six"
    (! isfile "$twodee_working_dir"/libmisc_2d_arr/$arrname/array_count || \
     ! isfile "$twodee_working_dir"/libmisc_2d_arr/$arrname/indice_count) && {
      print "Error: attempted reference undeclared array"
      fail
      return 1
    }
    [ -z "$x_coord" ] || [ -z "$y_coord" ] || [ -z "$xx_coord" ] || \
    [ -z "$yy_coord" ] || [ -z "$updstr" ] && {
      print "Error: update_section received insufficient input"
      fail
      return 1
    }
    (! chkvldint "$x_coord" || ! chkvldint "$y_coord" || \
    ! chkvldint "$xx_coord" || ! chkvldint "$yy_coord") && {
      print "Error: x and y must be int"
      fail
      return 1
    }
    ([ "$x_coord" -gt "$xx_coord" ] || [ "$y_coord" -gt "$yy_coord" ]) && {
      print "Error: x and y begin must be smaller than x and y end"
      fail
      return 1
    }
    x_ln=$(cat "$twodee_working_dir"/libmisc_2d_arr/$arrname/indice_count)
    y_ln=$(cat "$twodee_working_dir"/libmisc_2d_arr/$arrname/array_count)
    ([ "$x_coord" -gt "$x_ln" ] || [ "$y_coord" -gt "$y_ln" ] || \
     [ "$xx_coord" -gt "$x_ln" ] || [ "$yy_coord" -gt "$y_ln" ] || \
     [ "$x_coord" -le 0 ] || [ "$y_coord" -le 0 ] || \
     [ "$xx_coord" -le 0 ] || [ "$yy_coord" -le 0 ]) && {
      print "OOB"
      return 3
    }
    upd_y_count=$op_four
    y_stop_point=$yy_coord
    x_stop_point=$xx_coord
    while true; do
      upd_x_count=$op_three
      while true; do
        (2d_arr update "$arrname" "$updstr" "$upd_x_count" "$upd_y_count")
        upd_x_count=$((upd_x_count+1))
        [ "$upd_x_count" -gt "$x_stop_point" ] && \
          break
      done
      upd_y_count=$((upd_y_count+1))
      [ "$upd_y_count" -gt "$y_stop_point" ] && \
        break
    done
    return 0
  }

  query_section() {
    x_coord="$op_three"
    y_coord="$op_four"
    xx_coord="$op_five"
    yy_coord="$op_six"
    (! isfile "$twodee_working_dir"/libmisc_2d_arr/$arrname/array_count || \
     ! isfile "$twodee_working_dir"/libmisc_2d_arr/$arrname/indice_count) && {
      print "Error: attempted reference undeclared array"
      fail
      return 1
    }
    [ -z "$x_coord" ] || [ -z "$y_coord" ] || [ -z "$xx_coord" ] || \
    [ -z "$yy_coord" ] && {
      print "Error: query_section received insufficient input"
      fail
      return 1
    }
    (! chkvldint "$x_coord" || ! chkvldint "$y_coord" || \
    ! chkvldint "$xx_coord" || ! chkvldint "$yy_coord") && {
      print "Error: x and y must be int"
      fail
      return 1
    }
    ([ "$x_coord" -gt "$xx_coord" ] || [ "$y_coord" -gt "$yy_coord" ]) && {
      print "Error: x and y begin must be smaller than x and y end"
      fail
      return 1
    }
    x_ln=$(cat "$twodee_working_dir"/libmisc_2d_arr/$arrname/indice_count)
    y_ln=$(cat "$twodee_working_dir"/libmisc_2d_arr/$arrname/array_count)
    ([ "$x_coord" -gt "$x_ln" ] || [ "$y_coord" -gt "$y_ln" ] || \
     [ "$xx_coord" -gt "$x_ln" ] || [ "$yy_coord" -gt "$y_ln" ] || \
     [ "$x_coord" -le 0 ] || [ "$y_coord" -le 0 ] || \
     [ "$xx_coord" -le 0 ] || [ "$yy_coord" -le 0 ]) && {
      print "OOB"
      return 3
    }
    y_stop_point=$yy_coord
    x_stop_point=$xx_coord
    y_start_point=$y_coord
    x_start_point=$x_coord
    while true; do
      query_section_working=$(2d_arr query_row $arrname $y_start_point)
      query_sec_county=0
      IFS=$' '
      for query_sect_working in $=query_section_working; do
        query_sec_county=$((query_sec_county+1))
        [ "$query_sec_county" -ge "$x_start_point" ] && \
        [ "$query_sec_county" -le "$x_stop_point" ] && \
          print -n ""$query_sect_working" "
        [ "$query_sec_county" -gt "$x_stop_point" ] && \
          break
      done
      unset IFS
      print ''
      y_start_point=$((y_start_point+1))
      [ "$y_start_point" -gt "$y_stop_point" ] && \
        break
    done
    return 0
  }

  invert() {
    (! isfile "$twodee_working_dir"/libmisc_2d_arr/$arrname/array_count || \
     ! isfile "$twodee_working_dir"/libmisc_2d_arr/$arrname/indice_count) && {
      print "Error: attempted reference undeclared array"
      fail
      return 1
    }
    # read x as y and y as x
    invert_x_ln=$(cat "$twodee_working_dir"/libmisc_2d_arr/$arrname/array_count)
    invert_y_ln=$(cat "$twodee_working_dir"/libmisc_2d_arr/$arrname/indice_count)
    # create blank array with inverted x y ln
    arrname_orig="$arrname"
    x_ln_orig=$(cat "$twodee_working_dir"/libmisc_2d_arr/$arrname/indice_count)
    y_ln_orig=$(cat "$twodee_working_dir"/libmisc_2d_arr/$arrname/array_count)
    draw_inverted() {
      invert_x_count=0
      while true; do
        invert_x_count=$((invert_x_count+1))
        [ "$invert_x_count" -gt "$x_ln_orig" ] && \
          break
        print -n $(2d_arr qc $arrname $invert_x_count) && \
        print ''
      done
    }
    arr_contents_orig=$(draw_inverted)
    blank=1 2d_arr create $arrname $invert_x_ln $invert_y_ln
    invert_y_count=0
    IFS=$'\n'
    for invert_working in $=arr_contents_orig; do
      invert_y_count=$((invert_y_count+1))
      invert_x_count=0
      IFS=$' '
      for do_invert in $=invert_working; do
        invert_x_count=$((invert_x_count+1))
        (2d_arr update "$arrname_orig" "$do_invert" "$invert_x_count" "$invert_y_count")
      done
      unset IFS
    done
    return 0
  }

  invert_section() {
    is_x_start="$op_three"
    is_y_start="$op_four"
    is_x_end="$op_five"
    is_y_end="$op_six"
    ! isfile "$twodee_working_dir"/libmisc_2d_arr/$arrname && {
      print "Error: attempted reference undeclared array"
      fail
      return 1
    }
    x_ln=$(cat "$twodee_working_dir"/libmisc_2d_arr/$arrname/indice_count)
    y_ln=$(cat "$twodee_working_dir"/libmisc_2d_arr/$arrname/array_count)
    [ -z "$is_x_start" ] && \
      is_x_start=1
    [ -z "$is_y_start" ] && \
      is_y_start=1
    [ -z "$is_y_end" ] && \
      is_y_end="$y_ln"
    [ -z "$is_x_end" ] && \
      is_x_end="$x_ln"
    (! chkvldint "$is_x_start" || ! chkvldint "$is_x_end" || \
     ! chkvldint "$is_y_start" || ! chkvldint "$is_y_end") && {
      print "Error: x and y begin + end must be int"
      fail
      return 1
    }
    ([ "$is_x_start" -gt "$is_y_end" ] || [ "$is_y_start" -gt "$is_y_end" ]) && {
      print "Error: x and y start must be smaller than x and y end"
      fail
      return 1
    }
    ([ "$is_x_start" -le 0 ] || [ "$is_y_start" -le 0 ] || \
     [ "$is_x_end" -le 0 ] || [ "$is_y_end" -le 0 ] || \
     [ "$is_x_start" -gt "$x_ln" ] || [ "$is_x_end" -gt "$x_ln" ] || \
     [ "$is_y_start" -gt "$y_ln" ] || [ "$is_y_end" -gt "$y_ln" ]) && {
      print "OOB"
      return 3
    }
    # ensure input is square so we don't clash with other indices upon invert
    is_test_x=$((is_x_end-is_x_start))
    is_test_y=$((is_y_end-is_y_start))
    [ "$is_test_x" != "$is_test_y" ] && [ "$overwrite_indices" != 1 ] && {
      print "Error: (x_end - x_start) and (y_end - y_start) must be the same number"
      fail
      return 9
    }
    [ "$overwrite_indices" = 1 ] && {
      ([ "$is_y_end" -gt "$x_ln" ] || [ "$is_x_end" -gt "$y_ln" ]) && {
        print "OOB"
        return 3
      }
    }
    is_session_id=$(nrandom)
    touch "$twodee_working_dir"/libmisc_2d_arr/$arrname/is_$is_session_id
    is_x_counter=$((is_x_start-1))
    while true; do
      is_x_counter=$((is_x_counter+1))
      [ "$is_x_counter" -gt "$is_x_end" ] && \
        break
      is_working_indice=$(print -n $(2d_arr qc $arrname $is_x_counter))
      unset is_working_array
      declare -a is_working_array
      is_indice_counter=0
      IFS=$' '
      for is_indice in $=is_working_indice; do
        is_indice_counter=$((is_indice_counter+1))
        [ "$is_indice_counter" -gt "$is_y_end" ] && \
          break
        [ "$is_indice_counter" -ge "$is_y_start" ] && {
          is_working_array+=("$is_indice")
        }
      done
      unset IFS
      is_y_array_counter=0
      is_new_x_counter=$((is_x_start-1))
      while true; do
        is_new_x_counter=$((is_new_x_counter+1))
        [ "$is_new_x_counter" -gt "$is_x_end" ] && \
          break
        [ "$is_new_x_counter" -ge "$is_x_begin" ] && {
          is_y_array_counter=$((is_y_array_counter+1))
          print -n ""$is_working_array[$is_y_array_counter]" " >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/is_$is_session_id
        }
      done
      print >> "$twodee_working_dir"/libmisc_2d_arr/$arrname/is_$is_session_id
    done
    is_inverted_section=$(cat "$twodee_working_dir"/libmisc_2d_arr/$arrname/is_$is_session_id)
    rm -rf "$twodee_working_dir"/libmisc_2d_arr/$arrname/is_$is_session_id
    is_y_counter=$((is_y_start-1))
    IFS=$'\n'
    for do_invert_row in $=is_inverted_section; do
      is_y_counter=$((is_y_counter+1))
      is_x_counter=$((is_x_start-1))
      IFS=$' '
      for do_invert_indice in $=do_invert_row; do
        is_x_counter=$((is_x_counter+1))
        (2d_arr update $arrname $do_invert_indice $is_x_counter $is_y_counter)
      done
      unset IFS
    done
    unset IFS
    return 0
  }

  mirror_x() {
    mx_coord="$op_five"
    mxx_coord="$op_six"
    my_coord="$op_three"
    myy_coord="$op_four"
    ! isfile "$twodee_working_dir"/libmisc_2d_arr/$arrname && {
      print "Error: attempted reference undeclared array"
      fail
      return 1
    }
    x_ln=$(cat "$twodee_working_dir"/libmisc_2d_arr/$arrname/indice_count)
    y_ln=$(cat "$twodee_working_dir"/libmisc_2d_arr/$arrname/array_count)
    [ -z "$my_coord" ] && \
      my_coord=1
    [ -z "$myy_coord" ] && \
      myy_coord="$y_ln"
    [ -z "$mx_coord" ] && \
      mx_coord=1
    [ -z "$mxx_coord" ] && \
      mxx_coord="$x_ln"
    (! chkvldint "$my_coord" || ! chkvldint "$myy_coord" || \
     ! chkvldint "$mx_coord" || ! chkvldint "$mxx_coord") && {
      print "Error: x and y must be valid int"
      fail
      return 1
    }
    ([ "$mx_coord" -gt "$mxx_coord" ] || [ "$my_coord" -gt "$myy_coord" ]) && {
      print "Error: x begin and y begin must not be greater than x end and y end"
      fail
      return 1
    }
    ([ "$my_coord" -gt "$y_ln" ] || [ "$myy_coord" -gt "$y_ln" ] || \
     [ "$mx_coord" -gt "$x_ln" ] || [ "$mxx_coord" -gt "$x_ln" ] || \
     [ "$my_coord" -le 0 ] || [ "$myy_coord" -le 0 ] || \
     [ "$mx_coord" -le 0 ] || [ "$mxx_coord" -le 0 ]) && {
      print "OOB"
      return 3
    }
    y_counter=$((my_coord-1))
    while true; do
      y_counter=$((y_counter+1))
      [ "$y_counter" -gt "$myy_coord" ] && \
        break
      [ "$y_counter" -ge "$my_coord" ] && {
        mirror_x_str=''
        mirror_x_working=''
        mirror_x_working=$(2d_arr qr $arrname $y_counter)
        IFS=$' '
        mirror_x_count=0
        for do_mirror_x in $=mirror_x_working; do
          mirror_x_count=$((mirror_x_count+1))
          [ "$mirror_x_count" -gt "$mxx_coord" ] && \
            break
          [ "$mirror_x_count" -ge "$mx_coord" ] && \
            mirror_x_str=""$do_mirror_x" "$mirror_x_str""
        done
        unset mirror_x_array
        declare -a mirror_x_array
        for do_mirror_x in $=mirror_x_str; do
          mirror_x_array+=("$do_mirror_x")
        done
        unset IFS
        x_counter=$((mx_coord-1))
        x_arr_count=0
        while true; do
          x_counter=$((x_counter+1))
          [ "$x_counter" -gt "$mxx_coord" ] && \
            break
          [ "$x_counter" -ge "$mx_coord" ] && {
            x_arr_count=$((x_arr_count+1))
            2d_arr update $arrname $mirror_x_array[$x_arr_count] $x_counter $y_counter
          }
        done
      }
    done
    return 0
  }

  mirror_y() {
    my_x_coord="$op_three"
    my_xx_coord="$op_four"
    my_y_coord="$op_five"
    my_yy_coord="$op_six"
    ! isfile "$twodee_working_dir"/libmisc_2d_arr/$arrname && {
      print "Error: attempted reference undeclared array"
      fail
      return 1
    }
    x_ln=$(cat "$twodee_working_dir"/libmisc_2d_arr/$arrname/indice_count)
    y_ln=$(cat "$twodee_working_dir"/libmisc_2d_arr/$arrname/array_count)
    [ -z "$my_y_coord" ] && \
      my_y_coord=1
    [ -z "$my_yy_coord" ] && \
      my_yy_coord="$y_ln"
    [ -z "$my_x_coord" ] && \
      my_x_coord=1
    [ -z "$my_xx_coord" ] && \
      my_xx_coord="$x_ln"
    (! chkvldint "$my_y_coord" || ! chkvldint "$my_yy_coord" || \
     ! chkvldint "$my_x_coord" || ! chkvldint "$my_xx_coord") && {
      print "Error: x and y must be valid int"
      fail
      return 1
    }
    ([ "$my_x_coord" -gt "$my_xx_coord" ] || [ "$my_y_coord" -gt "$my_yy_coord" ]) && {
      print "Error: x begin and y begin must not be greater than x end and y end"
      fail
      return 1
    }
    ([ "$my_y_coord" -gt "$y_ln" ] || [ "$my_yy_coord" -gt "$y_ln" ] || \
     [ "$my_x_coord" -gt "$x_ln" ] || [ "$my_xx_coord" -gt "$x_ln" ] || \
     [ "$my_y_coord" -le 0 ] || [ "$my_yy_coord" -le 0 ] || \
     [ "$my_x_coord" -le 0 ] || [ "$my_xx_coord" -le 0 ]) && {
      print "OOB"
      return 3
    }
    x_counter=$((my_x_coord-1))
    while true; do
      x_counter=$((x_counter+1))
      [ "$x_counter" -gt "$my_xx_coord" ] && \
        break
      [ "$x_counter" -ge "$my_x_coord" ] && {
        mirror_y_str=''
        mirror_y_working=''
        mirror_y_working=$(2d_arr qc $arrname $x_counter)
        IFS=$'\n'
        mirror_y_count=0
        for do_mirror_y in $=mirror_y_working; do
          mirror_y_count=$((mirror_y_count+1))
          [ "$mirror_y_count" -gt "$my_yy_coord" ] && \
            break
          [ "$mirror_y_count" -ge "$my_y_coord" ] && \
            mirror_y_str=""$do_mirror_y" "$mirror_y_str""
        done
        IFS=$' '
        unset mirror_y_array
        declare -a mirror_y_array
        for do_mirror_y in $=mirror_y_str; do
          mirror_y_array+=("$do_mirror_y")
        done
        unset IFS
        y_counter=$((my_y_coord-1))
        y_arr_count=0
        while true; do
          y_counter=$((y_counter+1))
          [ "$y_counter" -gt "$my_yy_coord" ] && \
            break
          [ "$y_counter" -ge "$my_y_coord" ] && {
            y_arr_count=$((y_arr_count+1))
            2d_arr update $arrname $mirror_y_array[$y_arr_count] $x_counter $y_counter
          }
        done
      }
    done
  }

  rotate_90() {
    [ -z "$op_six" ] && {
      (2d_arr invert $arrname) || \
        return 1
      (2d_arr mx $arrname) || \
        return 1
    } || {
      r90_x_start="$op_three"
      r90_x_end="$op_five"
      r90_y_start="$op_four"
      r90_y_end="$op_six"
      (2d_arr invert_section $arrname $r90_x_start $r90_y_start $r90_x_end $r90_y_end) || \
        return 1
      (2d_arr mx $arrname $r90_y_start $r90_y_end $r90_x_start $r90_x_end) || \
        return 1
    }
    return 0
  }

  rotate_180() {
    [ -z "$op_six" ] && {
      (2d_arr mx $arrname) || \
        return 1
      (2d_arr my $arrname) || \
        return 1
    } || {
      r180_x_start="$op_three"
      r180_x_end="$op_five"
      r180_y_start="$op_four"
      r180_y_end="$op_six"
      (2d_arr mx $arrname $r180_y_start $r180_y_end $r180_x_start $r180_x_end) || \
        return 1
      (2d_arr my $arrname $r180_x_start $r180_x_end $r180_y_start $r180_y_end) || \
        return 1
    }
    return 0
  }

  rotate_270() {
    [ -z "$op_six" ] && {
      (2d_arr invert $arrname) || \
        return 1
      (2d_arr my $arrname) || \
        return 1
    } || {
      r270_x_start="$op_three"
      r270_x_end="$op_five"
      r270_y_start="$op_four"
      r270_y_end="$op_six"
      (2d_arr invert_section $arrname $r270_x_start $r270_y_start $r270_x_end $r270_y_end) || \
        return 1
      (2d_arr my $arrname $r270_x_start $r270_x_end $r270_y_start $r270_y_end) || \
        return 1
    }
    return 0
  }

  anti_invert() {
    [ -z "$op_six" ] && {
      (2d_arr invert $arrname) || \
        return 1
      (2d_arr mx $arrname) || \
        return 1
      (2d_arr my $arrname) || \
        return 1
    } || {
      anti_x_start="$op_three"
      anti_x_end="$op_five"
      anti_y_start="$op_four"
      anti_y_end="$op_six"
      (2d_arr invert_section $arrname $anti_x_start $anti_y_start $anti_x_end $anti_y_end) || \
        return 1
      (2d_arr mx $arrname $anti_y_start $anti_y_end $anti_x_start $anti_x_end) || \
        return 1
      (2d_arr my $arrname $anti_x_start $anti_x_end $anti_y_start $anti_y_end) || \
        return 1
    }
    return 0
  }

  flush() {
    ! isfile "$twodee_working_dir"/libmisc_2d_arr/$arrname && {
      print "Error: attempted reference undeclared array"
      fail
      return 1
    }
    flush_working=$(2d_arr draw $arrname)
    flush_x_ln=$(cat "$twodee_working_dir"/libmisc_2d_arr/$arrname/indice_count)
    flush_y_ln=$(cat "$twodee_working_dir"/libmisc_2d_arr/$arrname/array_count)
    blank=1 2d_arr create $arrname $flush_x_ln $flush_y_ln
    flush_y_count=0
    IFS=$'\n'
    for do_flush_row in $=flush_working; do
      flush_y_count=$((flush_y_count+1))
      flush_x_count=0
      IFS=$' '
      for do_flush_col in $=do_flush_row; do
        flush_x_count=$((flush_x_count+1))
        2d_arr update $arrname "$do_flush_col" $flush_x_count $flush_y_count
      done
      unset IFS
    done
    unset IFS
    return 0
  }

  resize_arr() {
    resize_arr_x_ln="$op_three"
    resize_arr_y_ln="$op_four"
    ! isfile "$twodee_working_dir"/libmisc_2d_arr/$arrname && {
      print "Error: attempted reference undeclared array"
      fail
      return 1
    }
    ([ -z "$resize_arr_x_ln" ] || [ -z "$resize_arr_y_ln" ]) && {
      print "Error: x and y length cannot be blank"
      fail
      return 1
    }
    (! chkvldint "$resize_arr_x_ln" || ! chkvldint "$resize_arr_y_ln") && {
      print "Error: x and y length must be int"
      fail
      return 1
    }
    ([ "$resize_arr_x_ln" -le 0 ] || [ "$resize_arr_y_ln" -le 0 ]) && {
      print "OOB"
      return 3
    }
    resize_arr_working=$(2d_arr draw $arrname)
    blank=1 2d_arr create $arrname $resize_arr_x_ln $resize_arr_y_ln
    [ -z "$ra_y" ] && \
      resize_arr_y_count=0 || {
        (! chkvldint "$ra_y") && {
          print "Error: ra_y must be int"
          fail
          return 1
        }
        [ "$ra_y" -le 0 ] && {
          print "Error: ra_y cannot be <= 0"
          return 1
        }
        resize_arr_y_count=$((ra_y-1))
      }
    ! [ -z "$ra_x" ] && {
      (! chkvldint "$ra_x") && {
        print "Error: ra_x must be int"
        fail
        return 1
      }
      [ "$ra_x" -le 0 ] && {
        print "Error: ra_x cannot be <= 0"
        return 1
      }
    }
    IFS=$'\n'
    for do_resize_arr_row in $=resize_arr_working; do
      resize_arr_y_count=$((resize_arr_y_count+1))
      [ "$resize_arr_y_count" -gt "$resize_arr_y_ln" ] && \
        break
      [ -z "$ra_x" ] && \
        resize_arr_x_count=0 \
      || \
        resize_arr_x_count=$((ra_x-1))
      IFS=$' '
      for do_resize_arr_col in $=do_resize_arr_row; do
        resize_arr_x_count=$((resize_arr_x_count+1))
        [ "$resize_arr_x_count" -gt "$resize_arr_x_ln" ] && \
          break
        2d_arr update $arrname "$do_resize_arr_col" $resize_arr_x_count $resize_arr_y_count
      done
      unset IFS
    done
    unset IFS
    return 0
  }

  delete_row() {
    dlr_input="$op_three"
    ! isfile "$twodee_working_dir"/libmisc_2d_arr/$arrname && {
      print "Error: attempted reference undeclared array"
      fail
      return 1
    }
    [ -z "$dlr_input" ] && {
      print "Error: y_coord cannot be blank"
      fail
      return 1
    }
    (! chkvldint "$dlr_input") && {
      print "Error: y_coord must be int"
      fail
      return 1
    }
    ([ "$dlr_input" -gt "$(2d_arr qg $arrname -y)" ] || [ "$dlr_input" -le 0 ]) && {
      print "OOB"
      return 3
    }
    delrow_working=$(2d_arr draw $arrname)
    delrow_working=$(del_row_count=0
                     IFS=$'\n'
                     for do_del_row in $=delrow_working; do
                       del_row_count=$((del_row_count+1))
                       [ "$del_row_count" != "$dlr_input" ] && {
                         print "$do_del_row"
                       }
                     done
                     unset IFS)
    delrow_x_ln=$(cat "$twodee_working_dir"/libmisc_2d_arr/$arrname/indice_count)
    delrow_y_ln=$(($(cat "$twodee_working_dir"/libmisc_2d_arr/$arrname/array_count)-1))
    blank=1 2d_arr create $arrname $delrow_x_ln $delrow_y_ln
    delrow_y_count=0
    IFS=$'\n'
    for do_delrow_row in $=delrow_working; do
      delrow_y_count=$((delrow_y_count+1))
      delrow_x_count=0
      IFS=$' '
      for do_delrow_col in $=do_delrow_row; do
        delrow_x_count=$((delrow_x_count+1))
        2d_arr update $arrname "$do_delrow_col" $delrow_x_count $delrow_y_count
      done
      unset IFS
    done
    unset IFS
    return 0
  }

  delete_col() {
    dlc_input="$op_three"
    ! isfile "$twodee_working_dir"/libmisc_2d_arr/$arrname && {
      print "Error: attempted reference undeclared array"
      fail
      return 1
    }
    [ -z "$dlc_input" ] && {
      print "Error: y_coord cannot be blank"
      fail
      return 1
    }
    (! chkvldint "$dlc_input") && {
      print "Error: y_coord must be int"
      fail
      return 1
    }
    ([ "$dlc_input" -gt "$(2d_arr qg $arrname -x)" ] || [ "$dlc_input" -le 0 ]) && {
      print "OOB"
      return 3
    }
    delcol_working=$(2d_arr draw $arrname)
    delcol_working=$(IFS=$'\n'
                     for do_del_col in $=delcol_working; do
                       del_col_row_count=0
                       IFS=$' '
                       for do_del_col_ind in $=do_del_col; do
                         del_col_row_count=$((del_col_row_count+1))
                         [ "$del_col_row_count" != "$dlc_input" ] && {
                           print -n ""$do_del_col_ind" "
                         }
                       done
                       unset IFS
                       print ''
                     done
                     unset IFS)
    delcol_x_ln=$(($(cat "$twodee_working_dir"/libmisc_2d_arr/$arrname/indice_count)-1))
    delcol_y_ln=$(cat "$twodee_working_dir"/libmisc_2d_arr/$arrname/array_count)
    blank=1 2d_arr create $arrname $delcol_x_ln $delcol_y_ln
    delcol_y_count=0
    IFS=$'\n'
    for do_delcol_col in $=delcol_working; do
      delcol_y_count=$((delcol_y_count+1))
      delcol_x_count=0
      IFS=$' '
      for do_delcol_col in $=do_delcol_col; do
        delcol_x_count=$((delcol_x_count+1))
        2d_arr update $arrname "$do_delcol_col" $delcol_x_count $delcol_y_count
      done
      unset IFS
    done
    unset IFS
    return 0
  }

  insert_row() {
    inr_input="$op_three"
    ! isfile "$twodee_working_dir"/libmisc_2d_arr/$arrname && {
      print "Error: attempted reference undeclared array"
      fail
      return 1
    }
    [ -z "$inr_input" ] && {
      print "Error: y_coord cannot be blank"
      fail
      return 1
    }
    (! chkvldint "$inr_input") && {
      print "Error: y_coord must be int"
      fail
      return 1
    }
    ([ "$inr_input" -gt "$(2d_arr qg $arrname -y)" ] || [ "$inr_input" -le 0 ]) && {
      print "OOB"
      return 3
    }
    insrow_working=$(2d_arr draw $arrname)
    insrow_working=$(ins_row_count=0
                     IFS=$'\n'
                     for do_ins_row in $=insrow_working; do
                       ins_row_count=$((ins_row_count+1))
                       [ "$ins_row_count" != "$inr_input" ] && {
                         print "$do_ins_row"
                       } || {
                         insrow_x_ln=$(2d_arr qg $arrname -x)
                         insrow_print_counter=0
                         while true; do
                           insrow_print_counter=$((insrow_print_counter+1))
                           [ $insrow_print_counter -gt "$insrow_x_ln" ] && {
                             break
                           }
                           print -n ". "
                         done
                         print ''
                         print "$do_ins_row"
                       }
                     done
                     unset IFS)
    insrow_x_ln=$(cat "$twodee_working_dir"/libmisc_2d_arr/$arrname/indice_count)
    insrow_y_ln=$(($(cat "$twodee_working_dir"/libmisc_2d_arr/$arrname/array_count)+1))
    blank=1 2d_arr create $arrname $insrow_x_ln $insrow_y_ln
    insrow_y_count=0
    IFS=$'\n'
    for do_insrow_row in $=insrow_working; do
      insrow_y_count=$((insrow_y_count+1))
      insrow_x_count=0
      IFS=$' '
      for do_insrow_col in $=do_insrow_row; do
        insrow_x_count=$((insrow_x_count+1))
        2d_arr update $arrname "$do_insrow_col" $insrow_x_count $insrow_y_count
      done
      unset IFS
    done
    unset IFS
    return 0
  }

  insert_col() {
    inc_input="$op_three"
    ! isfile "$twodee_working_dir"/libmisc_2d_arr/$arrname && {
      print "Error: attempted reference undeclared array"
      fail
      return 1
    }
    [ -z "$inc_input" ] && {
      print "Error: y_coord cannot be blank"
      fail
      return 1
    }
    (! chkvldint "$inc_input") && {
      print "Error: y_coord must be int"
      fail
      return 1
    }
    ([ "$inc_input" -gt "$(2d_arr qg $arrname -x)" ] || [ "$inc_input" -le 0 ]) && {
      print "OOB"
      return 3
    }
    inscol_working=$(2d_arr draw $arrname)
    inscol_working=$(IFS=$'\n'
                     for do_ins_col in $=inscol_working; do
                       ins_col_row_count=0
                       IFS=$' '
                       for do_ins_col_ind in $=do_ins_col; do
                         ins_col_row_count=$((ins_col_row_count+1))
                         [ "$ins_col_row_count" != "$inc_input" ] && {
                           print -n ""$do_ins_col_ind" "
                         } || {
                           print -n ". "$do_ins_col_ind" "
                         }
                       done
                       unset IFS
                       print ''
                     done
                     unset IFS)
    inscol_x_ln=$(($(cat "$twodee_working_dir"/libmisc_2d_arr/$arrname/indice_count)+1))
    inscol_y_ln=$(cat "$twodee_working_dir"/libmisc_2d_arr/$arrname/array_count)
    blank=1 2d_arr create $arrname $inscol_x_ln $inscol_y_ln
    inscol_y_count=0
    IFS=$'\n'
    for do_inscol_col in $=inscol_working; do
      inscol_y_count=$((inscol_y_count+1))
      inscol_x_count=0
      IFS=$' '
      for do_inscol_col in $=do_inscol_col; do
        inscol_x_count=$((inscol_x_count+1))
        2d_arr update $arrname "$do_inscol_col" $inscol_x_count $inscol_y_count
      done
      unset IFS
    done
    unset IFS
    return 0
  }

  readin_col() {
    ric_target="$op_three"
    ric_upd="$op_four"
    ! isfile "$twodee_working_dir"/libmisc_2d_arr/$arrname && {
      print "Error: attempted reference undeclared array"
      fail
      return 1
    }
    ([ -z "$ric_target" ] || \
     [ -z "$ric_upd" ]) && {
      print "Error: readin_col was provided insufficient input"
      fail
      return 1
    }
    (! chkvldint "$ric_target") && {
      print "Error: col x must be int"
      fail
      return 1
    }
    ([ "$ric_target" -gt "$(2d_arr qg $arrname -x)" ] || [ "$ric_target" -le 0 ]) && {
      print "OOB"
      return 3
    }
    ric_y_counter=0
    [ "$ric_by_space" = 1 ] && {
      IFS=$' '
    } || {
      IFS=$'\n'
    }
    for do_ric_upd in $=ric_upd; do
      ric_y_counter=$((ric_y_counter+1))
      [ "$ric_y_counter" -gt "$(2d_arr qg $arrname -y)" ] && \
        break
      2d_arr update $arrname "$do_ric_upd" $ric_target $ric_y_counter || \
        return 1
    done
    unset IFS
    return 0
  }

  readin_row() {
    rir_target="$op_three"
    rir_upd="$op_four"
    ! isfile "$twodee_working_dir"/libmisc_2d_arr/$arrname && {
      print "Error: attempted reference undeclared array"
      fail
      return 1
    }
    ([ -z "$rir_target" ] || \
     [ -z "$rir_upd" ]) && {
      print "Error: readin_col was provided insufficient input"
      fail
      return 1
    }
    (! chkvldint "$rir_target") && {
      print "Error: col x must be int"
      fail
      return 1
    }
    ([ "$rir_target" -gt "$(2d_arr qg $arrname -y)" ] || [ "$rir_target" -le 0 ]) && {
      print "OOB"
      return 3
    }
    rir_x_counter=0
    [ "$rir_by_newline" = 1 ] && {
      IFS=$'\n'
    } || {
      IFS=$' '
    }
    for do_rir_upd in $=rir_upd; do
      rir_x_counter=$((rir_x_counter+1))
      [ "$rir_x_counter" -gt "$(2d_arr qg $arrname -x)" ] && \
        break
      2d_arr update $arrname "$do_rir_upd" $rir_x_counter $rir_target || \
        return 1
    done
    unset IFS
    return 0
  }

  readin_section() {
    ris_x="$op_three"
    ris_y="$op_four"
    ris_upd="$op_five"
    ! isfile "$twodee_working_dir"/libmisc_2d_arr/$arrname && {
      print "Error: attempted reference undeclared array"
      fail
      return 1
    }
    ([ -z "$ris_upd" ] || [ -z "$ris_x" ] || [ -z "$ris_y" ]) && {
      print "Error: ris received insufficient input"
      fail
      return 1
    }
    (! chkvldint "$ris_x" || ! chkvldint "$ris_y") && {
      print "Error: ris x and y must be int"
      fail
      return 1
    }
    ([ "$ris_x" -le 0 ] || [ "$ris_y" -le 0 ] || \
     [ "$ris_x" -gt "$(2d_arr qg $arrname -x)" ] || [ "$ris_y" -gt "$(2d_arr qg $arrname -y)" ]) && {
      print "OOB"
      return 3
    }
    ris_y_counter=$((ris_y-1))
    IFS=$'\n'
    for do_ris_y in $=ris_upd; do
      ris_y_counter=$((ris_y_counter+1))
      [ "$ris_y_counter" -gt "$(2d_arr qg $arrname -y)" ] && \
        break
      ris_x_counter=$((ris_x-1))
      IFS=$' '
      for do_ris_x in $=do_ris_y; do
        ris_x_counter=$((ris_x_counter+1))
        [ "$ris_x_counter" -gt "$(2d_arr qg $arrname -x)" ] && \
          break
        2d_arr update $arrname "$do_ris_x" $ris_x_counter $ris_y_counter || \
          return 1
      done
      unset IFS
    done
    unset IFS
    return 0
  }
  $request $arrname $op_two $op_three $op_four $op_five $op_six
}
