#!/usr/bin/env zsh
zzsh() {
  autoload libmiscinit
  libmiscinit
  autoload zstat
  autoload ctext
  autoload ztput
  autoload isfile
  autoload fox-fr
  autoload zmkfifo
  autoload zrm
  autoload nrandom
  ## env setup
  if [ -d "/tmp" ]; then
    zzsh_working_dir="/tmp/.libmisc"$UID""
  else
    zzsh_working_dir=""$HOME"/.libmisc"
  fi
  ! isfile "$zzsh_working_dir" && {
    mkdir "$zzsh_working_dir"
  }
  # busybox hook
  if [ -z "$zzsh_use_busybox" ]; then
    zzsh_use_busybox=0
  fi
  # username
  if [ -z "$USER" ]; then
    USER=unknown
  fi
  # hostname
  if [ -z "$HOSTNAME" ]; then
    if isfile /etc/hostname &> /dev/null; then
      HOSTNAME="$(fox-fr /etc/hostname)"
    else
      HOSTNAME=localhost
    fi
  fi
  # zzshrc
  if isfile ""$HOME"/.zzshrc" &> /dev/null; then
    source ""$HOME"/.zzshrc"
  fi
  # hacky newline printer for clear workaround
  zzsh_newlines() {
    print; print; print; print; print; print; print; print; print; print
  }
  ## main loop
  while true; do
    # set return to 0 if empty
    [ -z "$zzsh_return_val" ] && zzsh_return_val=0
    # U.I printout
    print -n ""$(ztput bold)""$(ctext blue)""$USER""$(ztput dim)""$(ctext magenta)"@""$(ctext reset)"$(ztput bold)""$(ctext blue)""$HOSTNAME" "$(ctext reset)""$(ztput dim)""$(ctext cyan)""$(print -n "$(pwd)")" "$(if [ $zzsh_return_val = 0 ]; then ctext green; else ctext reset; ctext red; fi)"> "$(ctext reset)""
    # read user input into variable
    ZZSH=$(read -e " ")
    if [ ! -z "$ZZSH" ]; then
      # hacky clear workaround
      if [ "$ZZSH" = 'clear' ]; then
        zzsh_newline_spammer=150
        until [ "$zzsh_newline_spammer" = 0 ]; do
          zzsh_newlines; zzsh_newlines; zzsh_newlines; zzsh_newlines; zzsh_newlines; zzsh_newlines; zzsh_newlines; zzsh_newlines; zzsh_newlines; zzsh_newlines
          zzsh_newline_spammer=$((zzsh_newline_spammer-10))
        done
        zzsh_return_val=0
      # correctly handle `exit` and `logout`
      elif [ "$ZZSH" = 'exit' ] || [ "$ZZSH" = 'logout' ]; then
        break
      # busybox hook
      elif [ "$zzsh_use_busybox" = 1 ]; then
        autoload busybox
        # cd workaround
        zzsh_busybox_test="$ZZSH"
        IFS=$' '
        for zzsh_busybox_test_args in $=zzsh_busybox_test; do
          if [ "$zzsh_busybox_test_args" = "cd" ]; then
            zzsh_busybox_is_cd=1
          else
            zzsh_busybox_is_cd=0
          fi
          break
        done
        unset IFS
        if [ "$zzsh_busybox_is_cd" = 1 ]; then
          eval $ZZSH; zzsh_return_val=$?
        else
          # create fifo, write command to fifo, execute with busybox sh, set return value, cleanup
          zzsh_fifo="$zzsh_working_dir/zzsh_"$(nrandom)"" &> /dev/null
          zmkfifo "$zzsh_fifo"
          fox-ec "$ZZSH" > "$zzsh_fifo" &|
          unset busybox_first_arg
          unset busybox_second_arg
          unset busybox_arg_array
          (busybox sh "$zzsh_fifo"); zzsh_return_val=$?
          until ! isfile "$zzsh_fifo" &> /dev/null; do
            zrm "$zzsh_fifo" &> /dev/null
          done
        fi
      else
        # standard execution with zsh
        eval $ZZSH; zzsh_return_val=$?
      fi
    fi
  done
  # return 0 upon `exit` or `logout`
  return 0
}
